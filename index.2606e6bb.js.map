{"mappings":"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","sources":["src/app/math/color.ts","src/app/math/vec2.ts","src/app/math/mat3.ts","src/app/gl/camera.ts","src/app/gl/draw-command.ts","src/app/gl/draw-box.ts","src/app/gl/draw-circle.ts","src/app/gl/draw-line.ts","src/app/gl/webgl-renderer.ts","src/app/gl/renderer.ts","src/app/ui/loading-screen.ts","src/app/ui/slider.ts","src/app/ui/input.ts","src/app/ui/switch.ts","src/app/app.ts","src/app/gl/index.ts","src/main.ts"],"sourcesContent":["/**\n * Represents a color.\n */\nexport class Color {\n  /** The red component. */\n  public r: number;\n\n  /** The green component. */\n  public g: number;\n\n  /** The blue component. */\n  public b: number;\n\n  /** The alpha component. */\n  public a: number;\n\n  /**\n   * @param r The red component.\n   * @param g The green component.\n   * @param b The blue component.\n   * @param a The alpha component.\n   */\n  public constructor(r: number, g: number, b: number, a: number = 1) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Creates a new color from the given RGBA values.\n   * @param r The red component.\n   * @param g The green component.\n   * @param b The blue component.\n   * @param a The alpha component.\n   * @returns The new color.\n   */\n  public static new(r: number, g: number, b: number, a: number = 1): Color {\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Creates a random color (fixed alpha).\n   * @returns The new color.\n   */\n  public static random(): Color {\n    return new Color(Math.random(), Math.random(), Math.random());\n  }\n\n  /**\n   * Returns the black color.\n   * @returns The black color.\n   */\n  public static black(): Color {\n    return new Color(0, 0, 0);\n  }\n\n  /**\n   * Returns the white color.\n   * @returns The white color.\n   */\n  public static white(): Color {\n    return new Color(1, 1, 1);\n  }\n\n  /**\n   * Returns the transparent color.\n   * @returns The transparent color.\n   */\n  public static transparent(): Color {\n    return new Color(0, 0, 0, 0);\n  }\n\n  /**\n   * Clones the color and returns the result.\n   * @returns The cloned color.\n   */\n  public clone(): Color {\n    return new Color(this.r, this.g, this.b, this.a);\n  }\n\n  /**\n   * Adds the given color to this color and returns the result (fixed alpha).\n   * @param other The color to add.\n   * @returns The result.\n   */\n  public add(other: Color): Color {\n    return new Color(this.r + other.r, this.g + other.g, this.b + other.b, this.a);\n  }\n\n  /**\n   * Mixes the color with the given color and returns the result (fixed alpha).\n   * @param min The minimum value.\n   * @param max The maximum value.\n   * @param delta The delta value.\n   * @returns The mixed color.\n   */\n  public mix(other: Color, delta: number): Color {\n    return new Color(\n        this.r + (other.r - this.r) * delta, this.g + (other.g - this.g) * delta, this.b + (other.b - this.b) * delta,\n        this.a);\n  }\n\n  /**\n   * Clamps the color to the given range (fixed alpha).\n   * @param min The minimum color.\n   * @param max The maximum color.\n   * @returns The clamped color.\n   */\n  public clamp(min: Color = Color.black(), max: Color = Color.white()): Color {\n    return new Color(\n        Math.max(min.r, Math.min(max.r, this.r)), Math.max(min.g, Math.min(max.g, this.g)),\n        Math.max(min.b, Math.min(max.b, this.b)), Math.max(min.a, Math.min(max.a, this.a)));\n  }\n}\n","import {Mat3} from './mat3';\n\n/**\n * Represents a row-major 2D vector.\n */\nexport class Vec2 {\n  /** The x coordinate. */\n  private _x: number;\n\n  /** The y coordinate. */\n  private _y: number;\n\n  /**\n   * @param x The x coordinate.\n   * @param y The y coordinate.\n   */\n  public constructor(x: number, y: number) {\n    this._x = x;\n    this._y = y;\n  }\n\n  /**\n   * Gets the x coordinate.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  /**\n   * Gets the y coordinate.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  /**\n   * Creates a new vector.\n   * @param x The x coordinate.\n   * @param y The y coordinate.\n   * @returns The new vector.\n   */\n  public static new(x: number, y: number): Vec2 {\n    return new Vec2(x, y);\n  }\n\n  /**\n   * Creates a new vector with zero coordinates.\n   * @returns The new vector.\n   */\n  public static zero(): Vec2 {\n    return new Vec2(0, 0);\n  }\n\n  /**\n   * Creates a new vector from an angle.\n   * @param angle The angle.\n   * @returns The new vector.\n   */\n  public static fromAngle(angle: number): Vec2 {\n    return new Vec2(Math.cos(angle), Math.sin(angle));\n  }\n\n  /**\n   * Clones this vector.\n   * @returns The cloned vector.\n   */\n  public clone(): Vec2 {\n    return new Vec2(this._x, this._y);\n  }\n\n  /**\n   * Adds another vector to this vector and returns the result.\n   * @param other The other vector.\n   * @returns The result.\n   */\n  public add(other: Vec2): Vec2 {\n    return new Vec2(this._x + other._x, this._y + other._y);\n  }\n\n  /**\n   * Subtracts another vector from this vector and returns the result.\n   * @param other The other vector.\n   * @returns The result.\n   */\n  public sub(other: Vec2): Vec2 {\n    return new Vec2(this._x - other._x, this._y - other._y);\n  }\n\n  /**\n   * Multiplies this vector by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result.\n   */\n  public mul(scalar: number): Vec2 {\n    return new Vec2(this._x * scalar, this._y * scalar);\n  }\n\n  /**\n   * Divides this vector by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result.\n   */\n  public div(scalar: number): Vec2 {\n    return new Vec2(this._x / scalar, this._y / scalar);\n  }\n\n  /**\n   * Calculates the dot product of this vector and another vector.\n   * @param other The other vector.\n   * @returns The dot product.\n   */\n  public dot(other: Vec2): number {\n    return this._x * other._x + this._y * other._y;\n  }\n\n  /**\n   * Calculates the squared length of this vector.\n   * @returns The squared length.\n   */\n  public lengthSquared(): number {\n    return this.dot(this);\n  }\n\n  /**\n   * Calculates the length of this vector.\n   * @returns The length.\n   */\n  public length(): number {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  /**\n   * Normalizes this vector and returns the result.\n   * @returns The result.\n   */\n  public normalize(): Vec2 {\n    return this.div(this.length());\n  }\n\n  /**\n   * Calculates the angle between this vector and another vector, or the angle between this vector and the x axis.\n   * @param other The other vector.\n   * @returns The angle.\n   */\n  public angle(other?: Vec2): number {\n    if (other === undefined)\n      return Math.atan2(this._y, this._x);\n    else\n      return Math.acos(this.dot(other) / (this.length() * other.length()));\n  }\n\n  /**\n   * Calculates the perpendicular vector of this vector and returns the result.\n   * @returns The result.\n   */\n  public perpendicular(): Vec2 {\n    return new Vec2(-this._y, this._x);\n  }\n\n  /**\n   * Multiplies this vector by a matrix.\n   * @param mat The matrix.\n   * @returns The result.\n   */\n  public apply(mat: Mat3): Vec2 {\n    const a = mat.elements;\n    const x = this._x;\n    const y = this._y;\n    return new Vec2(a[0] * x + a[3] * y + a[6], a[1] * x + a[4] * y + a[7]);\n  }\n\n  /**\n   * Clamps this vector to a given range.\n   * @param min The minimum value.\n   * @param max The maximum value.\n   * @returns The result.\n   */\n  public clamp(min: Vec2, max: Vec2): Vec2 {\n    return new Vec2(Math.max(min.x, Math.min(max.x, this._x)), Math.max(min.y, Math.min(max.y, this._y)));\n  }\n\n  /**\n   * Returns the absolute vector.\n   * @returns The result.\n   */\n  public abs(): Vec2 {\n    return new Vec2(Math.abs(this._x), Math.abs(this._y));\n  }\n\n  /**\n   * Returns the vector with the maximum components.\n   * @param other The other vector.\n   * @returns The result.\n   */\n  public max(other: Vec2): Vec2 {\n    return new Vec2(Math.max(this._x, other._x), Math.max(this._y, other._y));\n  }\n\n  /**\n   * Returns the vector with the minimum components.\n   * @param other The other vector.\n   * @returns The result.\n   */\n  public min(other: Vec2): Vec2 {\n    return new Vec2(Math.min(this._x, other._x), Math.min(this._y, other._y));\n  }\n}","import {Vec2} from './vec2';\n\n/**\n * Represents a row-major 3x3 matrix.\n */\nexport class Mat3 {\n  /** The matrix elements. */\n  public elements: Float32Array;\n\n  /**\n   * @param elements The matrix elements.\n   */\n  public constructor(...elements: number[]) {\n    if (elements.length !== 9) throw new Error('Invalid Mat3 elements array size, must be 9');\n    this.elements = new Float32Array(elements);\n  }\n\n  /**\n   * Creates a new matrix from the given elements.\n   * @param elements The matrix elements.\n   * @returns The new matrix.\n   */\n  public static new(...elements: number[]): Mat3 {\n    return new Mat3(...elements);\n  }\n\n  /**\n   * Creates a new identity matrix.\n   * @returns The new identity matrix.\n   */\n  public static identity(): Mat3 {\n    return new Mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);\n  }\n\n  /**\n   * Creates a new translation matrix.\n   * @param vec The translation vector.\n   * @returns The new translation matrix.\n   */\n  public static translation(vec: Vec2): Mat3 {\n    return new Mat3(1, 0, 0, 0, 1, 0, vec.x, vec.y, 1);\n  }\n\n  /**\n   * Creates a new rotation matrix.\n   * @param angle The angle in radians.\n   * @returns The new rotation matrix.\n   */\n  public static rotation(angle: number): Mat3 {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    return new Mat3(c, s, 0, -s, c, 0, 0, 0, 1);\n  }\n\n  /**\n   * Creates a new scaling matrix.\n   * @param vec The scaling vector.\n   * @returns The new scaling matrix.\n   */\n  public static scale(vec: Vec2): Mat3;\n\n  /**\n   * Creates a new scaling matrix.\n   * @param factor The scaling factor.\n   * @returns The new scaling matrix.\n   */\n  public static scale(factor: number): Mat3;\n\n  // Implementation\n  public static scale(v: Vec2|number): Mat3 {\n    if (v instanceof Vec2)\n      return new Mat3(v.x, 0, 0, 0, v.y, 0, 0, 0, 1);\n    else\n      return new Mat3(v, 0, 0, 0, v, 0, 0, 0, 1);\n  }\n\n  /**\n   * Clones this matrix.\n   * @returns The clone.\n   */\n  public clone(): Mat3 {\n    return new Mat3(...Array.from(this.elements));\n  }\n\n  /**\n   * Multiplies this matrix with another matrix.\n   * @param other The other matrix.\n   * @returns The result.\n   */\n  public mul(other: Mat3): Mat3;\n\n  /**\n   * Multiplies this matrix by a scalar.\n   * @param scalar Scalar to multiply by.\n   * @returns The result.\n   */\n  public mul(other: number): Mat3;\n\n  // Implementation.\n  public mul(other: Mat3|number): Mat3 {\n    const a = this.elements;\n    const c = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n    if (other instanceof Mat3) {\n      // Matrix multiplication.\n      const b = other.elements;\n      for (let i = 0; i < 3; i++)\n        for (let j = 0; j < 3; j++)\n          for (let k = 0; k < 3; k++) c[i * 3 + j] += a[i * 3 + k] * b[k * 3 + j];\n    } else {\n      // Scalar multiplication.\n      for (let i = 0; i < 3; i++)\n        for (let j = 0; j < 3; j++) c[i * 3 + j] = a[i * 3 + j] * other;\n    }\n\n    return new Mat3(...c);\n  }\n\n  /**\n   * Calculates the determinant of this matrix.\n   * @returns The determinant.\n   */\n  public det(): number {\n    const a = this.elements;\n    let det = 0.0;\n    det += a[0] * a[4] * a[8] + a[1] * a[5] * a[6] + a[2] * a[3] * a[7];\n    det -= a[2] * a[4] * a[6] + a[1] * a[3] * a[8] + a[0] * a[5] * a[7];\n    return det;\n  }\n\n  /**\n   * Calculates the transpose of this matrix.\n   * @returns The transpose.\n   */\n  public transpose(): Mat3 {\n    const a = this.elements;\n    const c = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (let i = 0; i < 3; i++)\n      for (let j = 0; j < 3; j++) c[i * 3 + j] = a[j * 3 + i];\n    return new Mat3(...c);\n  }\n\n  /**\n   * Calculates the cofactor matrix of this matrix.\n   * @returns The cofactor matrix.\n   */\n  public cofactor(): Mat3 {\n    const a = this.elements;\n    const c = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (let i = 0; i < 3; i++)\n      for (let j = 0; j < 3; j++) {\n        const sign = (i + j) % 2 == 0 ? 1 : -1;\n        c[i * 3 + j] = sign * a[j * 3 + (i + 1) % 3] * a[(i + 2) * 3 + j];\n      }\n    return new Mat3(...c);\n  }\n\n  /**\n   * Calculates the inverse of this matrix.\n   * @returns The inverse.\n   */\n  public inverse(): Mat3 {\n    const det = this.det();\n    if (det == 0) throw new Error(`Can't find the inverse of the matrix because its determinant is zero`);\n    const cof = this.cofactor();\n    return cof.transpose().mul(1 / det);\n  }\n}\n","import {Mat3, Vec2} from '../math';\n\n/**\n * Represents a camera used to render a scene.\n */\nexport class Camera {\n  /** The camera's position. */\n  private _position: Vec2;\n\n  /** The camera's zoom. */\n  private _zoom: number;\n\n  /** The screen's aspect ratio. */\n  private _aspectRatio: number;\n\n  /** The camera's transform matrix. */\n  private _matrix: Mat3;\n\n  /**\n   * @param position The camera's position.\n   * @param zoom The camera's zoom.\n   * @param aspectRatio The screen's aspect ratio.\n   */\n  public constructor(position: Vec2, zoom: number, aspectRatio: number) {\n    this._position = position.clone();\n    this._zoom = zoom;\n    this._aspectRatio = aspectRatio;\n    this.updateMatrix();\n  }\n\n  /**\n   * Gets the camera's position.\n   */\n  public get position(): Vec2 {\n    return this._position.clone();\n  }\n\n  /**\n   * Sets the camera's position.\n   */\n  public set position(value: Vec2) {\n    this._position = value.clone();\n    this.updateMatrix();\n  }\n\n  /**\n   * Gets the camera's zoom.\n   */\n  public get zoom(): number {\n    return this._zoom;\n  }\n\n  /**\n   * Sets the camera's zoom.\n   */\n  public set zoom(value: number) {\n    this._zoom = value;\n    this.updateMatrix();\n  }\n\n  /**\n   * Gets the screen's aspect ratio.\n   */\n  public get aspectRatio(): number {\n    return this._aspectRatio;\n  }\n\n  /**\n   * Sets the screen's aspect ratio.\n   */\n  public set aspectRatio(value: number) {\n    this._aspectRatio = value;\n    this.updateMatrix();\n  }\n\n  /**\n   * Gets the camera's transform matrix.\n   */\n  public get matrix(): Mat3 {\n    return this._matrix.clone();\n  }\n\n  /**\n   * Converts a point from world coordinates to screen coordinates.\n   */\n  public worldToScreen(point: Vec2): Vec2 {\n    return point.apply(this._matrix);\n  }\n\n  /**\n   * Converts a point from screen coordinates to world coordinates.\n   */\n  public screenToWorld(point: Vec2): Vec2 {\n    return point.apply(this._matrix.inverse());\n  }\n\n  /**\n   * Updates the camera's transform matrix.\n   */\n  private updateMatrix(): void {\n    const translation = Mat3.translation(this._position);\n    const scale = Mat3.scale(Vec2.new(this._zoom * this._aspectRatio, this._zoom));\n    this._matrix = translation.mul(scale);\n  }\n}\n","/**\n * Represents a draw command.\n */\nexport class DrawCommand {}\n","import {Color, Vec2} from '../math';\nimport {DrawCommand} from './draw-command';\n\n/**\n * Command used to draw a box.\n */\nexport class DrawBox extends DrawCommand {\n  /** The center of the box. */\n  public center: Vec2;\n\n  /** The size of the box. */\n  public size: Vec2;\n\n  /** The rotation of the box. */\n  public rotation: number;\n\n  /** The color of the box. */\n  public color: Color;\n\n  /**\n   * @param center The center of the box.\n   * @param size The size of the box.\n   * @param rotation The rotation of the box.\n   * @param color The color of the box.\n   */\n  public constructor(center: Vec2, size: Vec2, rotation: number, color: Color) {\n    super();\n    this.center = center.clone();\n    this.size = size.clone();\n    this.rotation = rotation;\n    this.color = color.clone();\n  }\n}\n","import {Color, Vec2} from '../math';\nimport {DrawCommand} from './draw-command';\n\n/**\n * Command used to draw a circle.\n */\nexport class DrawCircle extends DrawCommand {\n  /** The center of the circle. */\n  public center: Vec2;\n\n  /** The radius of the circle. */\n  public radius: number;\n\n  /** The color of the circle. */\n  public color: Color;\n\n  /**\n   * @param center The center of the circle.\n   * @param radius The radius of the circle.\n   * @param color The color of the circle.\n   */\n  public constructor(center: Vec2, radius: number, color: Color) {\n    super();\n    this.center = center.clone();\n    this.radius = radius;\n    this.color = color.clone();\n  }\n}\n","import {Color, Vec2} from '../math';\nimport {DrawCommand} from './draw-command';\n\n/**\n * Command used to draw a line.\n */\nexport class DrawLine extends DrawCommand {\n  /** The start of the line. */\n  public start: Vec2;\n\n  /** The end of the line. */\n  public end: Vec2;\n\n  /** The thickness of the line. */\n  public thickness: number;\n\n  /** The color of the line. */\n  public color: Color;\n\n  /**\n   * @param start The start of the line.\n   * @param end The end of the line.\n   * @param radius The thickness of the line.\n   * @param color The color of the line.\n   */\n  public constructor(start: Vec2, end: Vec2, thickness: number, color: Color) {\n    super();\n    this.start = start.clone();\n    this.end = end.clone();\n    this.thickness = thickness;\n    this.color = color.clone();\n  }\n}\n","import {Color, Mat3, Vec2} from '../math';\n\nimport {DrawBox} from './draw-box';\nimport {DrawCircle} from './draw-circle';\nimport {DrawCommand} from './draw-command';\nimport {DrawLine} from './draw-line';\nimport {Renderer} from './renderer';\n\n/** Background color. */\nconst BACKGROUND_COLOR = new Color(0.3, 0.6, 0.9, 1.0);\n\n/** Number of circle divisions. */\nconst CIRCLE_DIVISIONS = 32;\n\n/** Line thickness. */\nconst LINE_THICKNESS = 0.05;\n\n/**\n * Renderer implementation for WebGL.\n */\nexport class WebGLRenderer extends Renderer {\n  /** The WebGL context. */\n  private _gl: WebGLRenderingContext;\n\n  /** The shader used to draw. */\n  private _drawShader: ShaderProgram;\n\n  /** The draw shader position attribute location. */\n  private _drawShaderPositionLocation: number;\n\n  /** The draw shader transform uniform location. */\n  private _drawShaderTransformLocation: WebGLUniformLocation;\n\n  /** The draw shader color uniform location. */\n  private _drawShaderColorLocation: WebGLUniformLocation;\n\n  /** Vertex buffer used for drawing primitives. */\n  private _vertexBuffer: WebGLBuffer;\n\n  /** Circle vertex offset and count. */\n  private _circle: [number, number];\n\n  /** Line vertex offset and count. */\n  private _line: [number, number];\n\n  /** Box vertex offset and count. */\n  private _box: [number, number];\n\n  /**\n   * @param canvas The canvas element.\n   */\n  public constructor(canvas: HTMLCanvasElement, gl: WebGLRenderingContext) {\n    super(canvas);\n    this._gl = gl;\n\n    // Create the shader program used to draw.\n    this._drawShader = new ShaderProgram(\n        this._gl, `\n      attribute vec2 position;\n\n      uniform mat3 transform;\n\n      void main() {\n        vec3 position = transform * vec3(position, 1.0);\n        gl_Position = vec4(position.xy, 0.0, 1.0);\n      }\n    `, `\n      precision mediump float;\n\n      uniform vec3 color;\n\n      void main() {\n        gl_FragColor = vec4(color, 1.0);\n      }\n    `);\n\n    // Get the shader attributes locations and uniform locations.\n    this._drawShaderPositionLocation = this._drawShader.getAttributeLocation('position');\n    this._drawShaderTransformLocation = this._drawShader.getUniformLocation('transform');\n    this._drawShaderColorLocation = this._drawShader.getUniformLocation('color');\n\n    // Generate circle primitive.\n    let vertices: number[] = [];\n    this._circle = [0, CIRCLE_DIVISIONS + 2];\n    vertices.push(0.0, 0.0);\n    for (let i = 0; i <= CIRCLE_DIVISIONS; i++) {\n      const angle = 2 * Math.PI * i / CIRCLE_DIVISIONS;\n      vertices.push(Math.cos(angle), Math.sin(angle));\n    }\n\n    // Generate line primitive.\n    this._line = [vertices.length / 2, 4];\n    vertices.push(-LINE_THICKNESS, 0.0);\n    vertices.push(-LINE_THICKNESS, 1.0);\n    vertices.push(+LINE_THICKNESS, 1.0);\n    vertices.push(+LINE_THICKNESS, 0.0);\n\n    // Generate box primitive.\n    this._box = [vertices.length / 2, 4];\n    vertices.push(-1.0, -1.0);\n    vertices.push(-1.0, +1.0);\n    vertices.push(+1.0, +1.0);\n    vertices.push(+1.0, -1.0);\n\n    // Create the vertex buffer used to draw primitives.\n    this._vertexBuffer = this._gl.createBuffer()!;\n    this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);\n    this._gl.bufferData(this._gl.ARRAY_BUFFER, new Float32Array(vertices), this._gl.STATIC_DRAW);\n  }\n\n  // Flushes the draw commands queue.\n  public override flush(): void {\n    // Clear the canvas.\n    this._gl.viewport(0, 0, this._canvas.width, this._canvas.height);\n    this._gl.clearColor(BACKGROUND_COLOR.r, BACKGROUND_COLOR.g, BACKGROUND_COLOR.b, 1);\n    this._gl.clear(this._gl.COLOR_BUFFER_BIT);\n\n    // Execute all the draw commands.\n    this._drawShader.use();\n    this.executeCommands(this.executeCommand.bind(this));\n    this.clearCommands();\n  }\n\n  /**\n   * Executes a draw command.\n   * @param command The command to execute.\n   */\n  private executeCommand(command: DrawCommand): void {\n    // Draw circle command.\n    if (command instanceof DrawCircle) {\n      // Set uniforms.\n      const model = Mat3.scale(command.radius).mul(Mat3.translation(command.center));\n      const final = model.mul(this.camera.matrix);\n      this._gl.uniformMatrix3fv(this._drawShaderTransformLocation, false, final.elements);\n      this._gl.uniform3f(this._drawShaderColorLocation, command.color.r, command.color.g, command.color.b);\n\n      // Draw the circle.\n      this._gl.enableVertexAttribArray(this._drawShaderPositionLocation);\n      this._gl.vertexAttribPointer(this._drawShaderPositionLocation, 2, this._gl.FLOAT, false, 0, 0);\n      this._gl.drawArrays(this._gl.TRIANGLE_FAN, this._circle[0], this._circle[1]);\n    }\n    // Draw box command.\n    else if (command instanceof DrawBox) {\n      // Set uniforms.\n      const model = Mat3.scale(command.size).mul(Mat3.rotation(command.rotation)).mul(Mat3.translation(command.center));\n      const final = model.mul(this.camera.matrix);\n      this._gl.uniformMatrix3fv(this._drawShaderTransformLocation, false, final.elements);\n      this._gl.uniform3f(this._drawShaderColorLocation, command.color.r, command.color.g, command.color.b);\n\n      // Draw the box.\n      this._gl.enableVertexAttribArray(this._drawShaderPositionLocation);\n      this._gl.vertexAttribPointer(this._drawShaderPositionLocation, 2, this._gl.FLOAT, false, 0, 0);\n      this._gl.drawArrays(this._gl.TRIANGLE_FAN, this._box[0], this._box[1]);\n    }\n    // Draw line command.\n    else if (command instanceof DrawLine) {\n      // Set uniforms.\n      const offset = command.end.sub(command.start);\n      const translation = Mat3.translation(command.start);\n      const scale = Mat3.scale(Vec2.new(command.thickness, offset.length()));\n      const rotation = Mat3.rotation(offset.angle() - Math.PI / 2);\n      const final = scale.mul(rotation).mul(translation).mul(this.camera.matrix);\n      this._gl.uniformMatrix3fv(this._drawShaderTransformLocation, false, final.elements);\n      this._gl.uniform3f(this._drawShaderColorLocation, command.color.r, command.color.g, command.color.b);\n\n      // Draw the line.\n      this._gl.enableVertexAttribArray(this._drawShaderPositionLocation);\n      this._gl.vertexAttribPointer(this._drawShaderPositionLocation, 2, this._gl.FLOAT, false, 0, 0);\n      this._gl.drawArrays(this._gl.TRIANGLE_FAN, this._line[0], this._line[1]);\n    }\n  }\n}\n\n/**\n * WebGL shader program wrapper.\n */\nclass ShaderProgram {\n  /** The WebGL context. */\n  private _gl: WebGLRenderingContext;\n\n  /** The shader program. */\n  private _program: WebGLProgram;\n\n  /** The vertex shader. */\n  private _vertexShader: WebGLShader;\n\n  /** The fragment shader. */\n  private _fragmentShader: WebGLShader;\n\n  public constructor(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\n    this._gl = gl;\n\n    // Create shaders.\n    this._vertexShader = this.createShader(this._gl.VERTEX_SHADER, vertexShaderSource);\n    this._fragmentShader = this.createShader(this._gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n    // Attach and link the shaders.\n    this._program = this._gl.createProgram()!;\n    this._gl.attachShader(this._program, this._vertexShader);\n    this._gl.attachShader(this._program, this._fragmentShader);\n    this._gl.linkProgram(this._program);\n\n    // Check if the program linked successfully.\n    if (!this._gl.getProgramParameter(this._program, this._gl.LINK_STATUS))\n      throw new Error(`Shader linking failed: ${this._gl.getProgramInfoLog(this._program)!}`);\n  }\n\n  /**\n   * Uses the shader program.\n   */\n  public use(): void {\n    this._gl.useProgram(this._program);\n  }\n\n  /**\n   * Gets the attribute location.\n   * @param name The attribute name.\n   * @return The attribute location.\n   */\n  public getAttributeLocation(name: string): number {\n    return this._gl.getAttribLocation(this._program, name);\n  }\n\n  /**\n   * Gets the uniform location.\n   * @param name The uniform name.\n   * @return The uniform location.\n   */\n  public getUniformLocation(name: string): WebGLUniformLocation {\n    const loc = this._gl.getUniformLocation(this._program, name);\n    if (loc === null) throw new Error(`Shader uniform ${name} not found.`);\n    return loc;\n  }\n\n  /**\n   * Creates a WebGL shader.\n   * @param type The shader type.\n   * @param source The shader source.\n   */\n  private createShader(type: number, source: string): WebGLShader {\n    const shader = this._gl.createShader(type)!;\n    this._gl.shaderSource(shader, source);\n    this._gl.compileShader(shader);\n\n    // Check if the shader compiled successfully.\n    if (!this._gl.getShaderParameter(shader, this._gl.COMPILE_STATUS))\n      throw new Error(`Shader compilation failed: ${this._gl.getShaderInfoLog(shader)!}`);\n\n    return shader;\n  }\n}","import {Color, Vec2} from '../math';\n\nimport {Camera} from './camera';\nimport {DrawBox} from './draw-box';\nimport {DrawCircle} from './draw-circle';\nimport {DrawCommand} from './draw-command';\nimport {DrawLine} from './draw-line';\n\n/**\n * Class used to draw stuff on the canvas.\n */\nexport abstract class Renderer {\n  /** The canvas element. */\n  protected _canvas: HTMLCanvasElement;\n\n  /** The camera used to render. */\n  private _camera: Camera;\n\n  /** The draw commands queue. */\n  private _drawCommands: DrawCommand[];\n\n  /**\n   * @param canvas The canvas element.\n   */\n  public constructor(canvas: HTMLCanvasElement) {\n    this._canvas = canvas;\n    this._camera = new Camera(Vec2.zero(), 0.5, this._canvas.height / this._canvas.width);\n    this._drawCommands = [];\n    this.onResize();\n  }\n\n  /**\n   * Draws a circle.\n   * @param center The circle's center.\n   * @param radius The circle's radius.\n   * @param color The circle's color.\n   */\n  public drawCircle(center: Vec2, radius: number, color: Color): void {\n    this._drawCommands.push(new DrawCircle(center, radius, color));\n  }\n\n  /**\n   * Draws a box.\n   * @param center The center of the box.\n   * @param size The size of the box.\n   * @param rotation The rotation of the box.\n   * @param color The color of the box.\n   */\n  public drawBox(center: Vec2, size: Vec2, rotation: number, color: Color): void {\n    this._drawCommands.push(new DrawBox(center, size, rotation, color));\n  }\n\n  /**\n   * Draws a line.\n   * @param start The start of the line.\n   * @param end The end of the line.\n   * @param thickness The thickness of the line.\n   * @param color The color of the line.\n   */\n  public drawLine(start: Vec2, end: Vec2, thickness: number, color: Color): void {\n    this._drawCommands.push(new DrawLine(start, end, thickness, color));\n  }\n\n  /**\n   * Gets the camera used to render.\n   */\n  public get camera(): Camera {\n    return this._camera;\n  }\n\n  /**\n   * Flushes the draw commands queue.\n   */\n  public abstract flush(): void;\n\n  /**\n   * Should be called when the window is resized.\n   */\n  public onResize(): void {\n    // Update the canvas size to match the window size.\n    this._canvas.width = window.innerWidth;\n    this._canvas.height = window.innerHeight;\n\n    // Update the camera's aspect ratio.\n    this._camera.aspectRatio = this._canvas.height / this._canvas.width;\n  }\n\n  /**\n   * Executes all the draw commands.\n   * @param method The method used to draw the commands.\n   */\n  protected executeCommands(method: (command: DrawCommand) => void): void {\n    this._drawCommands.forEach(command => method(command));\n  }\n\n  /**\n   * Clears all draw commands.\n   */\n  protected clearCommands(): void {\n    this._drawCommands = [];\n  }\n}\n","/**\n * Loading screen implementation.\n */\nexport class LoadingScreen {\n  /** The loading screen element. */\n  private _element: HTMLElement;\n\n  /**\n   * @param element The loading screen element.\n   */\n  public constructor(element: HTMLElement) {\n    this._element = element;\n  }\n\n  /**\n   * Creates a new loading screen from a query selector.\n   * @param selector The selector for the loading screen element.\n   * @return The loading screen.\n   */\n  public static fromSelector(selector: string): LoadingScreen {\n    const element = document.querySelector(selector) as HTMLElement;\n    if (element === null) throw new Error('Loading screen element not found.');\n    return new LoadingScreen(element);\n  }\n\n  /**\n   * Checks if the the loading screen is visible.\n   */\n  public get loading(): boolean {\n    return this._element.style.display === 'block';\n  }\n\n  /**\n   * Shows or hides the loading screen.\n   */\n  public set loading(value: boolean) {\n    if (value)\n      this._element.style.display = 'block';\n    else\n      this._element.style.display = 'none';\n  }\n}","import {Input} from './input';\n\ntype SliderType = 'exponential'|'linear'|'integer';\n\n/**\n * Builder for creating sliders.\n */\nclass SliderBuilder {\n  /** The DOM element that represents the slider. */\n  private _element: HTMLInputElement;\n\n  /** The minimum value. */\n  private _min: number;\n\n  /** The maximum value. */\n  private _max: number;\n\n  /** The step size. */\n  private _step: number;\n\n  /** The initial value. */\n  private _initial: number;\n\n  /** The type of the slider. */\n  private _type: SliderType;\n\n  /**\n   * @param element The DOM element that represents the slider.\n   */\n  public constructor(element: HTMLInputElement) {\n    this._element = element;\n    this._min = 0.0;\n    this._max = 1.0;\n    this._step = 0.01;\n    this._initial = 0.5;\n    this._type = 'linear';\n  }\n\n  /**\n   * Sets the minimum value.\n   * @param min The minimum value.\n   * @return The builder.\n   */\n  public min(min: number): SliderBuilder {\n    this._min = min;\n    this._initial = Math.max(this._initial, this._min);\n    return this;\n  }\n\n  /**\n   * Sets the maximum value.\n   * @param max The maximum value.\n   * @return The builder.\n   */\n  public max(max: number): SliderBuilder {\n    this._max = max;\n    this._initial = Math.min(this._initial, this._max);\n    return this;\n  }\n\n  /**\n   * Sets the step size.\n   * @param step The step size.\n   * @return The builder.\n   */\n  public step(step: number): SliderBuilder {\n    this._step = step;\n    this._initial = Math.round((this._initial - this._min) / this._step) * this._step + this._min;\n    return this;\n  }\n\n  /**\n   * Sets the initial value.\n   * @param initial The initial value.\n   * @return The builder.\n   */\n  public initial(initial: number): SliderBuilder {\n    this._initial = initial;\n    return this;\n  }\n\n  /**\n   * Makes the slider exponential.\n   * @return The builder.\n   */\n  public exponential(): SliderBuilder {\n    this._type = 'exponential';\n    return this;\n  }\n\n  /**\n   * Makes the slider linear.\n   * @return The builder.\n   */\n  public linear(): SliderBuilder {\n    this._type = 'linear';\n    return this;\n  }\n\n  /**\n   * Makes the slider integer.\n   * @returns The builder.\n   */\n  public integer(): SliderBuilder {\n    this._type = 'integer';\n    return this;\n  }\n\n  /**\n   * Builds the slider.\n   * @return The slider.\n   */\n  public build(): Slider {\n    return new Slider(this._element, this._min, this._max, this._step, this._initial, this._type);\n  }\n}\n\n/**\n * Implements an input slider.\n */\nexport class Slider extends Input<number> {\n  /** The builder used to create new sliders. */\n  public static Builder = SliderBuilder;\n\n  /** The input element. */\n  private _input: HTMLInputElement;\n\n  /** The display element. */\n  private _display: HTMLSpanElement;\n\n  /** The minimum value. */\n  private _min: number;\n\n  /** The maximum value. */\n  private _max: number;\n\n  /** The step value. */\n  private _step: number;\n\n  /** The slider's type. */\n  private _type: SliderType;\n\n  /**\n   * @param element The DOM element that represents the slider.\n   * @param min The minimum value.\n   * @param max The maximum value.\n   * @param step The step value.\n   * @param initial The initial value.\n   * @param type The slider's type.\n   */\n  public constructor(element: HTMLElement, min: number, max: number, step: number, initial: number, type: SliderType) {\n    super(initial);\n\n    this._min = min;\n    this._max = max;\n    this._step = step;\n    this._type = type;\n\n    this._input = element.querySelector('input') as HTMLInputElement;\n    this._input.setAttribute('min', this._min.toString());\n    this._input.setAttribute('min', this._max.toString());\n    this._input.setAttribute('step', step.toString());\n    this._input.addEventListener('input', () => {\n      const value = parseFloat(this._input.value);\n      switch (this._type) {\n        case 'exponential':\n          this.value = Math.pow(10.0, value);\n          break;\n        case 'integer':\n          this.value = Math.round(value);\n          break;\n        default:\n          this.value = value;\n          break;\n      }\n    });\n\n    this._display = element.querySelector('span') as HTMLSpanElement;\n    this.updateDisplay();\n  }\n\n  // Validate the value.\n  protected override validate(value: number): number {\n    return Math.max(this._min, Math.min(this._max, value));\n  }\n\n  // Update the slider display.\n  protected override updateDisplay(): void {\n    if (this._type === 'exponential')\n      this._input.value = Math.log10(this.value).toString();\n    else\n      this._input.value = this.value.toString();\n\n    if (this._type === 'integer')\n      this._display.innerText = this.value.toFixed(0);\n    else\n      this._display.innerText = this.value.toPrecision(3);\n  }\n}","/**\n * Represents an input element which can be used to get a value from the user.\n * @tparam Type The type of the value.\n */\nexport abstract class Input<Type> {\n  /** The current value. */\n  private _value: Type;\n\n  /** The on value changed callbacks. */\n  private _onValueChanged: Set<(value: Type) => void>;\n\n  /**\n   * @param initial The initial value.\n   */\n  protected constructor(initial: Type) {\n    this._value = initial;\n    this._onValueChanged = new Set<(value: Type) => void>();\n  }\n\n  /**\n   * Gets the value of the input.\n   */\n  public get value(): Type {\n    return this._value;\n  }\n\n  /**\n   * Sets the value of the input.\n   */\n  set value(value: Type) {\n    const newValue = this.validate(value);\n    if (this._value === newValue) return;\n    this._value = newValue;\n    this._onValueChanged.forEach(callback => callback(this._value));\n    this.updateDisplay();\n  }\n\n  /**\n   * Validates the value of the input.\n   * @param value The value to validate.\n   * @return The validated value.\n   */\n  protected abstract validate(value: Type): Type;\n\n  /**\n   * Updates the display of the input.\n   */\n  protected abstract updateDisplay(): void;\n\n  /**\n   * Adds a callback to be called when the value of the input changes.\n   * @param callback The callback.\n   */\n  public addOnValueChangedCallback(callback: (value: Type) => void): void {\n    this._onValueChanged.add(callback);\n  }\n\n  /**\n   * Removes a callback from being called when the value of the input changes.\n   * @param callback The callback.\n   */\n  public removeOnValueChangedCallback(callback: (value: Type) => void): void {\n    this._onValueChanged.delete(callback);\n  }\n}\n","import {Toggle} from './toggle';\n\n/**\n * Builder for creating switches.\n */\nclass SwitchBuilder {\n  /** The toggles. */\n  private _toggles: Map<String, Toggle>;\n\n  /** The initial state. */\n  private _initial: String;\n\n  /** Allow none state? */\n  private _allowNone: boolean;\n\n  // Default constructor.\n  public constructor() {\n    this._toggles = new Map<String, Toggle>();\n    this._initial = '';\n    this._allowNone = false;\n  }\n\n  /**\n   * Adds a toggle to the switch.\n   * @param name The name of the toggle.\n   * @param toggle The toggle.\n   * @returns The builder.\n   */\n  public addToggle(name: String, toggle: Toggle): SwitchBuilder {\n    this._toggles.set(name, toggle);\n    if (this._initial === '') this._initial = name;\n    return this;\n  }\n\n  /**\n   * Sets the initial activated toggle.\n   * @param name The name of the toggle.\n   * @returns The builder.\n   */\n  public initial(name: String): SwitchBuilder {\n    if (!this._toggles.has(name))\n      throw new Error(\n          `Couldn't set initial activated toggle on switch because the toggle '${name}' hasn't been added.`);\n    this._initial = name;\n    return this;\n  }\n\n  /**\n   * Allows the switch to have no state.\n   * @returns The builder.\n   */\n  public allowNone(): SwitchBuilder {\n    this._allowNone = true;\n    return this;\n  }\n\n  /**\n   * Builds the switch.\n   * @return The switch.\n   */\n  public build(): Switch {\n    return new Switch(this._toggles, this._initial, this._allowNone);\n  }\n}\n\n/**\n * Represents a set of UI toggles, of which only one can be activated at a time.\n */\nexport class Switch {\n  /** The builder used to create new switches. */\n  public static Builder = SwitchBuilder;\n\n  /** The toggles. */\n  private _toggles: Map<String, Toggle>;\n\n  /** The currently activated toggle. */\n  private _state: String;\n\n  /** Does the switch allow no state? */\n  private _allowNone: boolean;\n\n  /** The on state change callback. */\n  private _onStateChanged: Set<(state: String) => void>;\n\n  // Default constructor.\n  public constructor(toggles: Map<String, Toggle>, initial: String, allowNone: boolean) {\n    if (toggles.size === 0) throw new Error('A switch cannot be empty, toggles must be specified.');\n    this._toggles = toggles;\n    this._state = initial;\n    this._allowNone = allowNone;\n    this._onStateChanged = new Set<(state: String) => void>();\n\n    // Add the callbacks and set the initial state.\n    this._toggles.forEach((toggle, name) => {\n      if (name === this._state)\n        toggle.activated = true;\n      else\n        toggle.activated = false;\n\n      toggle.addOnActivatedCallback(() => {\n        this._state = name;\n        this._onStateChanged.forEach(callback => callback(name));\n      });\n\n      toggle.addOnDeactivatedCallback(() => {\n        // Switch toggles can't be deactivated if the switch doesn't allow no state.\n        if (this._state === name && !this._allowNone) toggle.activated = true;\n      });\n    });\n  }\n\n  /**\n   * Gets the current state of the switch.\n   */\n  public get state(): String {\n    return this._state;\n  }\n\n  /**\n   * Sets the current state of the switch.\n   */\n  public set state(state: String) {\n    if (this._state === state) return;\n    if (state === '' && !this._allowNone) throw new Error('Cannot set the state of the switch to none.');\n    if (state !== '' && !this._toggles.has(state))\n      throw new Error(\n          `Couldn't set the state of the switch to '${state}' because the toggle '${state}' hasn't been added.`);\n\n    // Set the new state.\n    const prevToggle = this._toggles.get(this._state);\n    if (prevToggle !== undefined) prevToggle.activated = false;\n    const nextToggle = this._toggles.get(state);\n    if (nextToggle !== undefined) nextToggle.activated = true;\n    this._state = state;\n    this._onStateChanged.forEach(callback => callback(this._state));\n  }\n\n  /**\n   * Adds a callback to be called when the state of the switch changes.\n   * @param callback The callback.\n   */\n  public addOnStateChangedCallback(callback: (state: String) => void): void {\n    this._onStateChanged.add(callback);\n  }\n\n  /**\n   * Removes a callback from being called when the state of the switch changes.\n   * @param callback The callback.\n   */\n  public removeOnStateChangedCallback(callback: (state: String) => void): void {\n    this._onStateChanged.delete(callback);\n  }\n}","import * as GL from './gl';\nimport * as UI from './ui';\n\n/**\n * Manages all the application state.\n */\nexport class App {\n  /** Renderer used to draw. */\n  private _renderer: GL.Renderer;\n\n  /** Loading screen. */\n  private loadingScreen: UI.LoadingScreen;\n\n  /** Resize timer. */\n  private _resizeTimer: number;\n\n  /** Last update time. */\n  private _lastTime: number;\n\n  // Default constructor.\n  public constructor() {\n    // Initialize the loading screen.\n    this.loadingScreen = UI.LoadingScreen.fromSelector('div#loading');\n\n    // Initialize the renderer.\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    this._renderer = GL.createRenderer(canvas);\n\n    // Initialize the resize callback\n    window.addEventListener('resize', () => {\n      this.loadingScreen.loading = true;\n      window.clearTimeout(this._resizeTimer);\n      this._resizeTimer = window.setTimeout(() => {\n        this._renderer.onResize();\n        this.loadingScreen.loading = false;\n      }, 250);\n    });\n  }\n\n  /**\n   * Starts the application.\n   */\n  public start(): void {\n    // Initialize the time step timer.\n    this._lastTime = 0.0;\n    this.loadingScreen.loading = false;\n    requestAnimationFrame(this.onAnimationFrame.bind(this));\n  }\n\n  /**\n   * Animates the application.\n   * @param dt Delta time in seconds.\n   */\n  private animate(dt: number): void {\n    // Flush the renderer.\n    this._renderer.flush();\n  }\n\n  /**\n   * Called when the round ends.\n   * @param time Time in milliseconds since the beginning of the application.\n   */\n  private onAnimationFrame(time: number): void {\n    // Calculate the delta time in seconds.\n    const dt = (time - this._lastTime) * 0.001;\n    this._lastTime = time;\n\n    // Animate the application.\n    if (!this.loadingScreen.loading) this.animate(dt);\n    requestAnimationFrame(this.onAnimationFrame.bind(this));\n  }\n}","import {Renderer} from './renderer';\nimport {WebGLRenderer} from './webgl-renderer';\n\nexport {Camera} from './camera';\nexport {Renderer};\n\n/**\n * Creates a new renderer.\n * @param canvas The canvas element.\n */\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n  const gl = canvas.getContext('webgl');\n  if (gl === null) throw new Error('WebGL is necessary but not supported.');\n  return new WebGLRenderer(canvas, gl);\n}","import {App} from './app/app';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const app = new App();\n  app.start();\n});\n"],"names":["$8b148bf6b83a7846$export$892596cec99bc70e","constructor","r","g","b","a","this","static","r1","g1","b1","a1","Math","random","clone","add","other","mix","other1","delta","clamp","min","black","max","white","$dcc7e654a00dbee5$export$ac4bca90992eed1","x","y","_x","_y","x1","y1","angle","cos","sin","sub","mul","scalar","div","scalar1","dot","other2","lengthSquared","length","sqrt","normalize","other3","undefined","atan2","acos","perpendicular","apply","mat","elements","abs","other4","other5","$12ada8d188c54dae$export$83f4edd572c84121","Error","Float32Array","elements1","vec","c","s","v","Array","from","i","j","k","det","transpose","cofactor","sign","inverse","$b65ffc6d52fcbf00$export$79f141de891a5fed","position","zoom","aspectRatio","_position","_zoom","_aspectRatio","updateMatrix","value","value1","value2","matrix","_matrix","worldToScreen","point","screenToWorld","point1","translation","scale","new","$e78d174192d82045$export$6803bcffe5c71ec4","$e9206fb83975a82c$export$110703ce240af00c","center","size","rotation","color","super","$3b4810748a69110d$export$e15e3a5ae5c2b5b","radius","$17d73e2faa924c3b$export$2906bdf8b6c2d498","start","end","thickness","$5d6bbdbde50a25a6$var$BACKGROUND_COLOR","$5d6bbdbde50a25a6$export$f6cc00ef28d7cf97","canvas","_canvas","_camera","zero","height","width","_drawCommands","onResize","drawCircle","push","drawBox","center1","color1","drawLine","color2","camera","window","innerWidth","innerHeight","executeCommands","method","forEach","command","clearCommands","gl","_gl","_drawShader","$5d6bbdbde50a25a6$var$ShaderProgram","_drawShaderPositionLocation","getAttributeLocation","_drawShaderTransformLocation","getUniformLocation","_drawShaderColorLocation","vertices","_circle","$5d6bbdbde50a25a6$var$CIRCLE_DIVISIONS","PI","_line","_box","bindBuffer","ARRAY_BUFFER","_vertexBuffer","bufferData","STATIC_DRAW","viewport","clearColor","clear","COLOR_BUFFER_BIT","use","executeCommand","bind","final","uniformMatrix3fv","uniform3f","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLE_FAN","offset","gl1","vertexShaderSource","fragmentShaderSource","_program","createProgram","attachShader","_vertexShader","_fragmentShader","useProgram","name","getAttribLocation","$4c1938dc61c8b6a5$export$e2b0760399e6dece","element","_element","selector","document","querySelector","loading","style","display","$cef218302c5f0c2e$export$472062a354075cee","initial","_value","_onValueChanged","Set","newValue","validate","callback","updateDisplay","addOnValueChangedCallback","removeOnValueChangedCallback","callback1","delete","element1","min1","max1","step1","initial1","type","_min","_max","_step","_type","_input","setAttribute","toString","addEventListener","parseFloat","pow","round","_display","log10","innerText","toFixed","toPrecision","Builder","_initial","step","exponential","linear","integer","build","$f48ef611b8f2db08$export$b5d5cf8927ab7262","toggles","allowNone","_toggles","_state","_allowNone","_onStateChanged","toggle","activated","addOnActivatedCallback","addOnDeactivatedCallback","state","has","prevToggle","get","nextToggle","addOnStateChangedCallback","removeOnStateChangedCallback","Map","addToggle","name2","toggle1","set","name1","$b4bfc8ad905cb117$export$86fbec116b87613f","loadingScreen","fromSelector","getElementById","_renderer","getContext","$7886ba4be4edc2a4$export$53ae2f996c64e9a","clearTimeout","_resizeTimer","setTimeout","_lastTime","requestAnimationFrame","onAnimationFrame","animate","dt","flush","time"],"version":3,"file":"index.2606e6bb.js.map"}