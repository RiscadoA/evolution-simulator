{"mappings":"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","sources":["src/app/math/color.ts","src/app/math/vec2.ts","src/app/math/mat3.ts","src/app/gl/camera.ts","src/app/gl/draw-arrow.ts","src/app/gl/draw-box.ts","src/app/gl/draw-circle.ts","src/app/gl/draw-line.ts","src/app/gl/webgl-renderer.ts","src/app/gl/renderer.ts","src/app/gl/command-queue.ts","src/app/sim/body.ts","src/app/evo/genome.ts","src/app/evo/connection.ts","src/app/evo/genotype.ts","src/app/evo/network.ts","src/app/evo/population.ts","src/app/sim/collider.ts","src/app/sim/creature.ts","src/app/sim/food.ts","src/app/sim/stage.ts","src/app/ui/button.ts","src/app/ui/display.ts","src/app/ui/input.ts","src/app/ui/range.ts","src/app/ui/slider.ts","src/app/ui/toggle.ts","src/app/ui/switch.ts","src/app/ui/form.ts","src/app/ui/form-chain.ts","src/app/ui/loading-screen.ts","src/app/app.ts","src/app/gl/index.ts","src/main.ts"],"sourcesContent":["/**\n * Represents a color.\n */\nexport class Color {\n  /** The red component. */\n  public r: number;\n\n  /** The green component. */\n  public g: number;\n\n  /** The blue component. */\n  public b: number;\n\n  /** The alpha component. */\n  public a: number;\n\n  /**\n   * @param r The red component.\n   * @param g The green component.\n   * @param b The blue component.\n   * @param a The alpha component.\n   */\n  public constructor(r: number, g: number, b: number, a: number = 1) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  /**\n   * Creates a new color from the given RGBA values.\n   * @param r The red component.\n   * @param g The green component.\n   * @param b The blue component.\n   * @param a The alpha component.\n   * @returns The new color.\n   */\n  public static new(r: number, g: number, b: number, a: number = 1): Color {\n    return new Color(r, g, b, a);\n  }\n\n  /**\n   * Creates a random color (fixed alpha).\n   * @returns The new color.\n   */\n  public static random(): Color {\n    return new Color(Math.random(), Math.random(), Math.random());\n  }\n\n  /**\n   * Returns the black color.\n   * @returns The black color.\n   */\n  public static black(): Color {\n    return new Color(0, 0, 0);\n  }\n\n  /**\n   * Returns the white color.\n   * @returns The white color.\n   */\n  public static white(): Color {\n    return new Color(1, 1, 1);\n  }\n\n  /**\n   * Returns the transparent color.\n   * @returns The transparent color.\n   */\n  public static transparent(): Color {\n    return new Color(0, 0, 0, 0);\n  }\n\n  /**\n   * Clones the color and returns the result.\n   * @returns The cloned color.\n   */\n  public clone(): Color {\n    return new Color(this.r, this.g, this.b, this.a);\n  }\n\n  /**\n   * Adds the given color to this color and returns the result (fixed alpha).\n   * @param other The color to add.\n   * @returns The result.\n   */\n  public add(other: Color): Color {\n    return new Color(this.r + other.r, this.g + other.g, this.b + other.b, this.a);\n  }\n\n  /**\n   * Mixes the color with the given color and returns the result (fixed alpha).\n   * @param min The minimum value.\n   * @param max The maximum value.\n   * @param delta The delta value.\n   * @returns The mixed color.\n   */\n  public mix(other: Color, delta: number): Color {\n    return new Color(\n        this.r + (other.r - this.r) * delta, this.g + (other.g - this.g) * delta, this.b + (other.b - this.b) * delta,\n        this.a);\n  }\n\n  /**\n   * Clamps the color to the given range (fixed alpha).\n   * @param min The minimum color.\n   * @param max The maximum color.\n   * @returns The clamped color.\n   */\n  public clamp(min: Color = Color.black(), max: Color = Color.white()): Color {\n    return new Color(\n        Math.max(min.r, Math.min(max.r, this.r)), Math.max(min.g, Math.min(max.g, this.g)),\n        Math.max(min.b, Math.min(max.b, this.b)), Math.max(min.a, Math.min(max.a, this.a)));\n  }\n}\n","import {Mat3} from './mat3';\n\n/**\n * Represents a row-major 2D vector.\n */\nexport class Vec2 {\n  /** Zero vector. */\n  public static readonly ZERO = new Vec2(0, 0);\n\n  /** The x coordinate. */\n  private _x: number;\n\n  /** The y coordinate. */\n  private _y: number;\n\n  /**\n   * @param x The x coordinate.\n   * @param y The y coordinate.\n   */\n  public constructor(x: number, y: number) {\n    this._x = x;\n    this._y = y;\n  }\n\n  /**\n   * Gets the x coordinate.\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  /**\n   * Gets the y coordinate.\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  /**\n   * Creates a new vector.\n   * @param x The x coordinate.\n   * @param y The y coordinate.\n   * @returns The new vector.\n   */\n  public static new(x: number, y: number): Vec2 {\n    return new Vec2(x, y);\n  }\n\n  /**\n   * Creates a new vector from an angle.\n   * @param angle The angle.\n   * @returns The new vector.\n   */\n  public static fromAngle(angle: number): Vec2 {\n    return new Vec2(Math.cos(angle), Math.sin(angle));\n  }\n\n  /**\n   * Returns a random vector within the given range.\n   * @param min The minimum value.\n   * @param max The maximum value.\n   * @returns The result.\n   */\n  public static random(min: Vec2, max: Vec2): Vec2 {\n    return new Vec2(Math.random() * (max.x - min.x) + min.x, Math.random() * (max.y - min.y) + min.y);\n  }\n\n  /**\n   * Adds another vector to this vector and returns the result.\n   * @param other The other vector.\n   * @returns The result.\n   */\n  public add(other: Vec2): Vec2 {\n    return new Vec2(this._x + other._x, this._y + other._y);\n  }\n\n  /**\n   * Subtracts another vector from this vector and returns the result.\n   * @param other The other vector.\n   * @returns The result.\n   */\n  public sub(other: Vec2): Vec2 {\n    return new Vec2(this._x - other._x, this._y - other._y);\n  }\n\n  /**\n   * Multiplies this vector by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result.\n   */\n  public mul(scalar: number): Vec2 {\n    return new Vec2(this._x * scalar, this._y * scalar);\n  }\n\n  /**\n   * Divides this vector by a scalar and returns the result.\n   * @param scalar The scalar.\n   * @returns The result.\n   */\n  public div(scalar: number): Vec2 {\n    return new Vec2(this._x / scalar, this._y / scalar);\n  }\n\n  /**\n   * Calculates the dot product of this vector and another vector.\n   * @param other The other vector.\n   * @returns The dot product.\n   */\n  public dot(other: Vec2): number {\n    return this._x * other._x + this._y * other._y;\n  }\n\n  /**\n   * Calculates the squared length of this vector.\n   * @returns The squared length.\n   */\n  public lengthSquared(): number {\n    return this.dot(this);\n  }\n\n  /**\n   * Calculates the length of this vector.\n   * @returns The length.\n   */\n  public length(): number {\n    return Math.sqrt(this.lengthSquared());\n  }\n\n  /**\n   * Normalizes this vector and returns the result.\n   * @returns The result.\n   */\n  public normalize(): Vec2 {\n    return this.div(this.length());\n  }\n\n  /**\n   * Calculates the angle between this vector and another vector, or the angle between this vector and the x axis.\n   * @param other The other vector.\n   * @returns The angle.\n   */\n  public angle(other?: Vec2): number {\n    if (other === undefined)\n      return Math.atan2(this._y, this._x);\n    else\n      return Math.acos(this.dot(other) / (this.length() * other.length()));\n  }\n\n  /**\n   * Calculates the perpendicular vector of this vector and returns the result.\n   * @returns The result.\n   */\n  public perpendicular(): Vec2 {\n    return new Vec2(-this._y, this._x);\n  }\n\n  /**\n   * Multiplies this vector by a matrix.\n   * @param mat The matrix.\n   * @returns The result.\n   */\n  public apply(mat: Mat3): Vec2 {\n    const a = mat.elements;\n    const x = this._x;\n    const y = this._y;\n    return new Vec2(a[0] * x + a[3] * y + a[6], a[1] * x + a[4] * y + a[7]);\n  }\n\n  /**\n   * Clamps this vector to a given range.\n   * @param min The minimum value.\n   * @param max The maximum value.\n   * @returns The result.\n   */\n  public clamp(min: Vec2, max: Vec2): Vec2 {\n    return new Vec2(Math.max(min.x, Math.min(max.x, this._x)), Math.max(min.y, Math.min(max.y, this._y)));\n  }\n\n  /**\n   * Returns the absolute vector.\n   * @returns The result.\n   */\n  public abs(): Vec2 {\n    return new Vec2(Math.abs(this._x), Math.abs(this._y));\n  }\n\n  /**\n   * Returns the vector with the maximum components.\n   * @param other The other vector.\n   * @returns The result.\n   */\n  public max(other: Vec2): Vec2 {\n    return new Vec2(Math.max(this._x, other._x), Math.max(this._y, other._y));\n  }\n\n  /**\n   * Returns the vector with the minimum components.\n   * @param other The other vector.\n   * @returns The result.\n   */\n  public min(other: Vec2): Vec2 {\n    return new Vec2(Math.min(this._x, other._x), Math.min(this._y, other._y));\n  }\n\n  /**\n   * Reflects this vector on a normal vector.\n   * @param normal The normal vector.\n   * @returns The result.\n   */\n  public reflect(normal: Vec2): Vec2 {\n    return this.sub(normal.mul(2 * this.dot(normal)));\n  }\n\n  /**\n   * Mixes this vector with another vector.\n   * @param other The other vector.\n   * @param t The mix factor.\n   * @returns The result.\n   */\n  public mix(other: Vec2, t: number): Vec2 {\n    return new Vec2(this._x * (1 - t) + other._x * t, this._y * (1 - t) + other._y * t);\n  }\n}","import {Vec2} from './vec2';\n\n/**\n * Represents a row-major 3x3 matrix.\n */\nexport class Mat3 {\n  /** The matrix elements. */\n  public elements: Float32Array;\n\n  /**\n   * @param elements The matrix elements.\n   */\n  public constructor(...elements: number[]) {\n    if (elements.length !== 9) throw new Error('Invalid Mat3 elements array size, must be 9');\n    this.elements = new Float32Array(elements);\n  }\n\n  /**\n   * Creates a new matrix from the given elements.\n   * @param elements The matrix elements.\n   * @returns The new matrix.\n   */\n  public static new(...elements: number[]): Mat3 {\n    return new Mat3(...elements);\n  }\n\n  /**\n   * Creates a new identity matrix.\n   * @returns The new identity matrix.\n   */\n  public static identity(): Mat3 {\n    return new Mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);\n  }\n\n  /**\n   * Creates a new translation matrix.\n   * @param vec The translation vector.\n   * @returns The new translation matrix.\n   */\n  public static translation(vec: Vec2): Mat3 {\n    return new Mat3(1, 0, 0, 0, 1, 0, vec.x, vec.y, 1);\n  }\n\n  /**\n   * Creates a new rotation matrix.\n   * @param angle The angle in radians.\n   * @returns The new rotation matrix.\n   */\n  public static rotation(angle: number): Mat3 {\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    return new Mat3(c, -s, 0, s, c, 0, 0, 0, 1);\n  }\n\n  /**\n   * Creates a new scaling matrix.\n   * @param vec The scaling vector.\n   * @returns The new scaling matrix.\n   */\n  public static scale(vec: Vec2): Mat3;\n\n  /**\n   * Creates a new scaling matrix.\n   * @param factor The scaling factor.\n   * @returns The new scaling matrix.\n   */\n  public static scale(factor: number): Mat3;\n\n  // Implementation\n  public static scale(v: Vec2|number): Mat3 {\n    if (v instanceof Vec2)\n      return new Mat3(v.x, 0, 0, 0, v.y, 0, 0, 0, 1);\n    else\n      return new Mat3(v, 0, 0, 0, v, 0, 0, 0, 1);\n  }\n\n  /**\n   * Clones this matrix.\n   * @returns The clone.\n   */\n  public clone(): Mat3 {\n    return new Mat3(...Array.from(this.elements));\n  }\n\n  /**\n   * Multiplies this matrix with another matrix.\n   * @param other The other matrix.\n   * @returns The result.\n   */\n  public mul(other: Mat3): Mat3;\n\n  /**\n   * Multiplies this matrix by a scalar.\n   * @param scalar Scalar to multiply by.\n   * @returns The result.\n   */\n  public mul(other: number): Mat3;\n\n  // Implementation.\n  public mul(other: Mat3|number): Mat3 {\n    const a = this.elements;\n    const c = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n    if (other instanceof Mat3) {\n      // Matrix multiplication.\n      const b = other.elements;\n      for (let i = 0; i < 3; i++)\n        for (let j = 0; j < 3; j++)\n          for (let k = 0; k < 3; k++) c[i * 3 + j] += a[i * 3 + k] * b[k * 3 + j];\n    } else {\n      // Scalar multiplication.\n      for (let i = 0; i < 3; i++)\n        for (let j = 0; j < 3; j++) c[i * 3 + j] = a[i * 3 + j] * other;\n    }\n\n    return new Mat3(...c);\n  }\n\n  /**\n   * Calculates the determinant of this matrix.\n   * @returns The determinant.\n   */\n  public det(): number {\n    const a = this.elements;\n    let det = 0.0;\n    det += a[0] * a[4] * a[8] + a[1] * a[5] * a[6] + a[2] * a[3] * a[7];\n    det -= a[2] * a[4] * a[6] + a[1] * a[3] * a[8] + a[0] * a[5] * a[7];\n    return det;\n  }\n\n  /**\n   * Calculates the transpose of this matrix.\n   * @returns The transpose.\n   */\n  public transpose(): Mat3 {\n    const a = this.elements;\n    const c = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (let i = 0; i < 3; i++)\n      for (let j = 0; j < 3; j++) c[i * 3 + j] = a[j * 3 + i];\n    return new Mat3(...c);\n  }\n\n  /**\n   * Calculates the adjunt matrix of this matrix.\n   * @returns The adjunt matrix.\n   */\n  public adjunt(): Mat3 {\n    const a = this.elements;\n    const b = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    b[0 * 3 + 0] = a[1 * 3 + 1] * a[2 * 3 + 2] - a[1 * 3 + 2] * a[2 * 3 + 1];\n    b[0 * 3 + 1] = a[0 * 3 + 2] * a[2 * 3 + 1] - a[0 * 3 + 1] * a[2 * 3 + 2];\n    b[0 * 3 + 2] = a[0 * 3 + 1] * a[1 * 3 + 2] - a[0 * 3 + 2] * a[1 * 3 + 1];\n    b[1 * 3 + 0] = a[1 * 3 + 2] * a[2 * 3 + 0] - a[1 * 3 + 0] * a[2 * 3 + 2];\n    b[1 * 3 + 1] = a[0 * 3 + 0] * a[2 * 3 + 2] - a[0 * 3 + 2] * a[2 * 3 + 0];\n    b[1 * 3 + 2] = a[0 * 3 + 2] * a[1 * 3 + 0] - a[0 * 3 + 0] * a[1 * 3 + 2];\n    b[2 * 3 + 0] = a[1 * 3 + 0] * a[2 * 3 + 1] - a[1 * 3 + 1] * a[2 * 3 + 0];\n    b[2 * 3 + 1] = a[0 * 3 + 1] * a[2 * 3 + 0] - a[0 * 3 + 0] * a[2 * 3 + 1];\n    b[2 * 3 + 2] = a[0 * 3 + 0] * a[1 * 3 + 1] - a[0 * 3 + 1] * a[1 * 3 + 0];\n    return new Mat3(...b);\n  }\n\n  /**\n   * Calculates the inverse of this matrix.\n   * @returns The inverse.\n   */\n  public inverse(): Mat3 {\n    const det = this.det();\n    if (det === 0) throw new Error(`Can't find the inverse of the matrix because its determinant is zero`);\n    return this.adjunt().mul(1 / det);\n  }\n}\n","import {Mat3, Vec2} from '../math';\n\n/**\n * Represents a camera used to render a scene.\n */\nexport class Camera {\n  /** The camera's position. */\n  private _position: Vec2;\n\n  /** The camera's velocity. */\n  public velocity: Vec2;\n\n  /** The camera's zoom. */\n  private _zoom: number;\n\n  /** The canvas' width. */\n  private _width: number;\n\n  /** The canvas' height. */\n  private _height: number;\n\n  /** The camera's transform matrix. */\n  private _matrix: Mat3;\n\n  /**\n   * @param position The camera's position.\n   * @param zoom The camera's zoom.\n   * @param width The canvas' width.\n   * @param height The canvas' height.\n   */\n  public constructor(position: Vec2, zoom: number, width: number, height: number) {\n    this._position = position;\n    this.velocity = Vec2.ZERO;\n    this._zoom = zoom;\n    this._width = width;\n    this._height = height;\n    this.updateMatrix();\n  }\n\n  /**\n   * Gets the camera's position.\n   */\n  public get position(): Vec2 {\n    return this._position;\n  }\n\n  /**\n   * Sets the camera's position.\n   */\n  public set position(value: Vec2) {\n    this._position = value;\n    this.updateMatrix();\n  }\n\n  /**\n   * Gets the camera's zoom.\n   */\n  public get zoom(): number {\n    return this._zoom;\n  }\n\n  /**\n   * Sets the camera's zoom.\n   */\n  public set zoom(value: number) {\n    this._zoom = value;\n    this.updateMatrix();\n  }\n\n  /**\n   * Sets the canvas' width.\n   */\n  public set width(value: number) {\n    this._width = value;\n    this.updateMatrix();\n  }\n\n  /**\n   * Sets the canvas' height.\n   */\n  public set height(value: number) {\n    this._height = value;\n    this.updateMatrix();\n  }\n\n  /**\n   * Gets the camera's transform matrix.\n   */\n  public get matrix(): Mat3 {\n    return this._matrix.clone();\n  }\n\n  /**\n   * Converts a point from world coordinates to screen coordinates.\n   * @param point The point to convert.\n   * @return The converted point.\n   */\n  public worldToScreen(point: Vec2): Vec2 {\n    return point.apply(this._matrix);\n  }\n\n  /**\n   * Converts a point from screen coordinates to world coordinates.\n   * @param point The point to convert.\n   * @return The converted point.\n   */\n  public screenToWorld(point: Vec2): Vec2 {\n    return point.apply(this._matrix.inverse());\n  }\n\n  /**\n   * Converts a point from canvas coordinates to world coordinates.\n   * @param point The point to convert.\n   * @return The converted point.\n   */\n  public canvasToWorld(point: Vec2): Vec2 {\n    const normalized = Vec2.new(point.x / this._width, -point.y / this._height).mul(2.0).add(Vec2.new(-1, 1));\n    return this.screenToWorld(normalized);\n  }\n\n  /**\n   * Updates the camera's transform matrix.\n   */\n  private updateMatrix(): void {\n    const translation = Mat3.translation(this._position.mul(-1));\n    const scale = Mat3.scale(Vec2.new(this._zoom * this._height / this._width, this._zoom));\n    this._matrix = translation.mul(scale);\n  }\n}\n","import {Color, Vec2} from '../math';\nimport {Command} from './command';\n\n/**\n * Command used to draw an arrow.\n */\nexport class DrawArrow implements Command {\n  /** The start of the arrow. */\n  public readonly start: Vec2;\n\n  /** The end of the arrow. */\n  public readonly end: Vec2;\n\n  /** The thickness of the arrow. */\n  public readonly thickness: number;\n\n  /** The color of the arrow. */\n  public readonly color: Color;\n\n  /** The start velocity of the arrow. */\n  private readonly _startVelocity: Vec2;\n\n  /** The end velocity of the arrow. */\n  private readonly _endVelocity: Vec2;\n\n  /**\n   * @param start The start of the arrow.\n   * @param end The end of the arrow.\n   * @param radius The thickness of the arrow.\n   * @param color The color of the arrow.\n   * @param startVelocity The velocity of the start of the arrow.\n   * @param endVelocity The velocity of the end of the arrow.\n   */\n  public constructor(start: Vec2, end: Vec2, thickness: number, color: Color, startVelocity: Vec2, endVelocity: Vec2) {\n    this.start = start;\n    this.end = end;\n    this.thickness = thickness;\n    this.color = color;\n    this._startVelocity = startVelocity;\n    this._endVelocity = endVelocity;\n  }\n\n  // Implement the Command interface.\n  public interpolate(dt: number): Command {\n    return new DrawArrow(\n        this.start.add(this._startVelocity.mul(dt)), this.end.add(this._endVelocity.mul(dt)), this.thickness,\n        this.color, this._startVelocity, this._endVelocity);\n  }\n}\n","import {Color, Vec2} from '../math';\nimport {Command} from './command';\n\n/**\n * Command used to draw a box.\n */\nexport class DrawBox implements Command {\n  /** The center of the box. */\n  public readonly center: Vec2;\n\n  /** The size of the box. */\n  public readonly size: Vec2;\n\n  /** The color of the box. */\n  public readonly color: Color;\n\n  /** The velocity of the box. */\n  private readonly _velocity: Vec2;\n\n  /**\n   * @param center The center of the box.\n   * @param size The size of the box.\n   * @param color The color of the box.\n   * @param velocity The velocity of the box.\n   */\n  public constructor(center: Vec2, size: Vec2, color: Color, velocity: Vec2) {\n    this.center = center;\n    this.size = size;\n    this.color = color;\n    this._velocity = velocity;\n  }\n\n  // Implement the Command interface.\n  public interpolate(dt: number): Command {\n    return new DrawBox(this.center.add(this._velocity.mul(dt)), this.size, this.color, this._velocity);\n  }\n}\n","import {Color, Vec2} from '../math';\nimport {Command} from './command';\n\n/**\n * Command used to draw a circle.\n */\nexport class DrawCircle implements Command {\n  /** The center of the circle. */\n  public readonly center: Vec2;\n\n  /** The radius of the circle. */\n  public readonly radius: number;\n\n  /** The color of the circle. */\n  public readonly color: Color;\n\n  /** The velocity of the circle. */\n  private readonly _velocity: Vec2;\n\n  /**\n   * @param center The center of the circle.\n   * @param radius The radius of the circle.\n   * @param color The color of the circle.\n   * @param velocity The velocity of the circle.\n   */\n  public constructor(center: Vec2, radius: number, color: Color, velocity: Vec2) {\n    this.center = center;\n    this.radius = radius;\n    this.color = color;\n    this._velocity = velocity;\n  }\n\n  // Implement the Command interface.\n  public interpolate(dt: number): Command {\n    return new DrawCircle(this.center.add(this._velocity.mul(dt)), this.radius, this.color, this._velocity);\n  }\n}\n","import {Color, Vec2} from '../math';\nimport {Command} from './command';\n\n/**\n * Command used to draw a line.\n */\nexport class DrawLine implements Command {\n  /** The start of the line. */\n  public readonly start: Vec2;\n\n  /** The end of the line. */\n  public readonly end: Vec2;\n\n  /** The thickness of the line. */\n  public readonly thickness: number;\n\n  /** The color of the line. */\n  public readonly color: Color;\n\n  /** The start velocity of the line. */\n  private readonly _startVelocity: Vec2;\n\n  /** The end velocity of the line. */\n  private readonly _endVelocity: Vec2;\n\n  /**\n   * @param start The start of the line.\n   * @param end The end of the line.\n   * @param radius The thickness of the line.\n   * @param color The color of the line.\n   * @param startVelocity The velocity of the start of the line.\n   * @param endVelocity The velocity of the end of the line.\n   */\n  public constructor(start: Vec2, end: Vec2, thickness: number, color: Color, startVelocity: Vec2, endVelocity: Vec2) {\n    this.start = start;\n    this.end = end;\n    this.thickness = thickness;\n    this.color = color;\n    this._startVelocity = startVelocity;\n    this._endVelocity = endVelocity;\n  }\n\n  // Implement the Command interface.\n  public interpolate(dt: number): Command {\n    return new DrawLine(\n        this.start.add(this._startVelocity.mul(dt)), this.end.add(this._endVelocity.mul(dt)), this.thickness,\n        this.color, this._startVelocity, this._endVelocity);\n  }\n}\n","import {Color, Mat3, Vec2} from '../math';\n\nimport {Command} from './command';\nimport {DrawArrow} from './draw-arrow';\nimport {DrawBox} from './draw-box';\nimport {DrawCircle} from './draw-circle';\nimport {DrawLine} from './draw-line';\nimport {Renderer} from './renderer';\n\n/** Background color. */\nconst BACKGROUND_COLOR = new Color(0.3, 0.6, 0.9, 1.0);\n\n/** Number of circle divisions. */\nconst CIRCLE_DIVISIONS = 64;\n\n/** Line thickness. */\nconst LINE_THICKNESS = 0.05;\n\n/** Arrow head size. */\nconst ARROW_HEAD_SIZE = 0.5;\n\n/**\n * Renderer implementation for WebGL.\n */\nexport class WebGLRenderer extends Renderer {\n  /** The WebGL context. */\n  private _gl: WebGLRenderingContext;\n\n  /** The shader used to draw. */\n  private _drawShader: ShaderProgram;\n\n  /** The draw shader position attribute location. */\n  private _drawShaderPositionLocation: number;\n\n  /** The draw shader transform uniform location. */\n  private _drawShaderTransformLocation: WebGLUniformLocation;\n\n  /** The draw shader color uniform location. */\n  private _drawShaderColorLocation: WebGLUniformLocation;\n\n  /** Vertex buffer used for drawing primitives. */\n  private _vertexBuffer: WebGLBuffer;\n\n  /** Circle vertex offset and count. */\n  private _circle: [number, number];\n\n  /** Line vertex offset and count. */\n  private _line: [number, number];\n\n  /** Box vertex offset and count. */\n  private _box: [number, number];\n\n  /**\n   * @param canvas The canvas element.\n   */\n  public constructor(canvas: HTMLCanvasElement, gl: WebGLRenderingContext) {\n    super(canvas);\n    this._gl = gl;\n\n    // Create the shader program used to draw.\n    this._drawShader = new ShaderProgram(\n        this._gl, `\n      attribute vec2 position;\n\n      uniform mat3 transform;\n\n      void main() {\n        vec3 position = transform * vec3(position, 1.0);\n        gl_Position = vec4(position.xy, 0.0, 1.0);\n      }\n    `,\n        `\n      precision mediump float;\n\n      uniform vec3 color;\n\n      void main() {\n        gl_FragColor = vec4(color, 1.0);\n      }\n    `);\n\n    // Get the shader attributes locations and uniform locations.\n    this._drawShaderPositionLocation = this._drawShader.getAttributeLocation('position');\n    this._drawShaderTransformLocation = this._drawShader.getUniformLocation('transform');\n    this._drawShaderColorLocation = this._drawShader.getUniformLocation('color');\n\n    // Generate circle primitive.\n    let vertices: number[] = [];\n    this._circle = [0, CIRCLE_DIVISIONS + 2];\n    vertices.push(0.0, 0.0);\n    for (let i = 0; i <= CIRCLE_DIVISIONS; i++) {\n      const angle = 2 * Math.PI * i / CIRCLE_DIVISIONS;\n      vertices.push(Math.cos(angle), Math.sin(angle));\n    }\n\n    // Generate line primitive.\n    this._line = [vertices.length / 2, 4];\n    vertices.push(-LINE_THICKNESS, 0.0);\n    vertices.push(-LINE_THICKNESS, 1.0);\n    vertices.push(+LINE_THICKNESS, 1.0);\n    vertices.push(+LINE_THICKNESS, 0.0);\n\n    // Generate box primitive.\n    this._box = [vertices.length / 2, 4];\n    vertices.push(-1.0, -1.0);\n    vertices.push(-1.0, +1.0);\n    vertices.push(+1.0, +1.0);\n    vertices.push(+1.0, -1.0);\n\n    // Create the vertex buffer used to draw primitives.\n    this._vertexBuffer = this._gl.createBuffer()!;\n    this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._vertexBuffer);\n    this._gl.bufferData(this._gl.ARRAY_BUFFER, new Float32Array(vertices), this._gl.STATIC_DRAW);\n  }\n\n  // Flushes the draw commands queue.\n  protected override render(): void {\n    // Clear the canvas.\n    this._gl.viewport(0, 0, this._canvas.width, this._canvas.height);\n    this._gl.clearColor(BACKGROUND_COLOR.r, BACKGROUND_COLOR.g, BACKGROUND_COLOR.b, 1);\n    this._gl.clear(this._gl.COLOR_BUFFER_BIT);\n\n    // Execute all the draw commands.\n    this._drawShader.use();\n    this.executeCommands(this.executeCommand.bind(this));\n  }\n\n  /**\n   * Executes a draw command.\n   * @param command The command to execute.\n   */\n  private executeCommand(command: Command): void {\n    // Draw circle command.\n    if (command instanceof DrawCircle) {\n      // Set uniforms.\n      const model = Mat3.scale(command.radius).mul(Mat3.translation(command.center));\n      const final = model.mul(this.camera.matrix);\n      this._gl.uniformMatrix3fv(this._drawShaderTransformLocation, false, final.elements);\n      this._gl.uniform3f(this._drawShaderColorLocation, command.color.r, command.color.g, command.color.b);\n\n      // Draw the circle.\n      this._gl.enableVertexAttribArray(this._drawShaderPositionLocation);\n      this._gl.vertexAttribPointer(this._drawShaderPositionLocation, 2, this._gl.FLOAT, false, 0, 0);\n      this._gl.drawArrays(this._gl.TRIANGLE_FAN, this._circle[0], this._circle[1]);\n    }\n    // Draw box command.\n    else if (command instanceof DrawBox) {\n      // Set uniforms.\n      const model = Mat3.scale(command.size).mul(Mat3.translation(command.center));\n      const final = model.mul(this.camera.matrix);\n      this._gl.uniformMatrix3fv(this._drawShaderTransformLocation, false, final.elements);\n      this._gl.uniform3f(this._drawShaderColorLocation, command.color.r, command.color.g, command.color.b);\n\n      // Draw the box.\n      this._gl.enableVertexAttribArray(this._drawShaderPositionLocation);\n      this._gl.vertexAttribPointer(this._drawShaderPositionLocation, 2, this._gl.FLOAT, false, 0, 0);\n      this._gl.drawArrays(this._gl.TRIANGLE_FAN, this._box[0], this._box[1]);\n    }\n    // Draw line command.\n    else if (command instanceof DrawLine) {\n      // Set uniforms.\n      const offset = command.end.sub(command.start);\n      const translation = Mat3.translation(command.start);\n      const scale = Mat3.scale(Vec2.new(command.thickness, offset.length()));\n      const rotation = Mat3.rotation(Math.PI / 2 - offset.angle());\n      const final = scale.mul(rotation).mul(translation).mul(this.camera.matrix);\n      this._gl.uniformMatrix3fv(this._drawShaderTransformLocation, false, final.elements);\n      this._gl.uniform3f(this._drawShaderColorLocation, command.color.r, command.color.g, command.color.b);\n\n      // Draw the line.\n      this._gl.enableVertexAttribArray(this._drawShaderPositionLocation);\n      this._gl.vertexAttribPointer(this._drawShaderPositionLocation, 2, this._gl.FLOAT, false, 0, 0);\n      this._gl.drawArrays(this._gl.TRIANGLE_FAN, this._line[0], this._line[1]);\n    }\n    // Draw arrow command.\n    else if (command instanceof DrawArrow) {\n      // Bind vertex array and set the color.\n      this._gl.enableVertexAttribArray(this._drawShaderPositionLocation);\n      this._gl.vertexAttribPointer(this._drawShaderPositionLocation, 2, this._gl.FLOAT, false, 0, 0);\n      this._gl.uniform3f(this._drawShaderColorLocation, command.color.r, command.color.g, command.color.b);\n\n      // Draw the arrow line.\n      const offset = command.end.sub(command.start);\n      const translation = Mat3.translation(command.start);\n      const scale = Mat3.scale(Vec2.new(command.thickness, offset.length()));\n      const rotation = Mat3.rotation(Math.PI / 2 - offset.angle());\n      const final = scale.mul(rotation).mul(translation).mul(this.camera.matrix);\n      this._gl.uniformMatrix3fv(this._drawShaderTransformLocation, false, final.elements);\n      this._gl.drawArrays(this._gl.TRIANGLE_FAN, this._line[0], this._line[1]);\n\n      // Draw the arrow head.\n      const head = Mat3.translation(command.end);\n      const headScale = Mat3.scale(Vec2.new(command.thickness, command.thickness * ARROW_HEAD_SIZE));\n      const head1Rotation = Mat3.rotation(Math.PI / 6 - Math.PI / 2 - offset.angle());\n      const head1Final = headScale.mul(head1Rotation).mul(head).mul(this.camera.matrix);\n      const head2Rotation = Mat3.rotation(-Math.PI / 6 - Math.PI / 2 - offset.angle());\n      const head2Final = headScale.mul(head2Rotation).mul(head).mul(this.camera.matrix);\n\n      this._gl.uniformMatrix3fv(this._drawShaderTransformLocation, false, head1Final.elements);\n      this._gl.drawArrays(this._gl.TRIANGLE_FAN, this._line[0], this._line[1]);\n      this._gl.uniformMatrix3fv(this._drawShaderTransformLocation, false, head2Final.elements);\n      this._gl.drawArrays(this._gl.TRIANGLE_FAN, this._line[0], this._line[1]);\n    }\n  }\n}\n\n/**\n * WebGL shader program wrapper.\n */\nclass ShaderProgram {\n  /** The WebGL context. */\n  private _gl: WebGLRenderingContext;\n\n  /** The shader program. */\n  private _program: WebGLProgram;\n\n  /** The vertex shader. */\n  private _vertexShader: WebGLShader;\n\n  /** The fragment shader. */\n  private _fragmentShader: WebGLShader;\n\n  public constructor(gl: WebGLRenderingContext, vertexShaderSource: string, fragmentShaderSource: string) {\n    this._gl = gl;\n\n    // Create shaders.\n    this._vertexShader = this.createShader(this._gl.VERTEX_SHADER, vertexShaderSource);\n    this._fragmentShader = this.createShader(this._gl.FRAGMENT_SHADER, fragmentShaderSource);\n\n    // Attach and link the shaders.\n    this._program = this._gl.createProgram()!;\n    this._gl.attachShader(this._program, this._vertexShader);\n    this._gl.attachShader(this._program, this._fragmentShader);\n    this._gl.linkProgram(this._program);\n\n    // Check if the program linked successfully.\n    if (!this._gl.getProgramParameter(this._program, this._gl.LINK_STATUS))\n      throw new Error(`Shader linking failed: ${this._gl.getProgramInfoLog(this._program)!}`);\n  }\n\n  /**\n   * Uses the shader program.\n   */\n  public use(): void {\n    this._gl.useProgram(this._program);\n  }\n\n  /**\n   * Gets the attribute location.\n   * @param name The attribute name.\n   * @return The attribute location.\n   */\n  public getAttributeLocation(name: string): number {\n    return this._gl.getAttribLocation(this._program, name);\n  }\n\n  /**\n   * Gets the uniform location.\n   * @param name The uniform name.\n   * @return The uniform location.\n   */\n  public getUniformLocation(name: string): WebGLUniformLocation {\n    const loc = this._gl.getUniformLocation(this._program, name);\n    if (loc === null) throw new Error(`Shader uniform ${name} not found.`);\n    return loc;\n  }\n\n  /**\n   * Creates a WebGL shader.\n   * @param type The shader type.\n   * @param source The shader source.\n   */\n  private createShader(type: number, source: string): WebGLShader {\n    const shader = this._gl.createShader(type)!;\n    this._gl.shaderSource(shader, source);\n    this._gl.compileShader(shader);\n\n    // Check if the shader compiled successfully.\n    if (!this._gl.getShaderParameter(shader, this._gl.COMPILE_STATUS))\n      throw new Error(`Shader compilation failed: ${this._gl.getShaderInfoLog(shader)!}`);\n\n    return shader;\n  }\n}","import {Color, Vec2} from '../math';\n\nimport {Camera} from './camera';\nimport {Command} from './command';\nimport {CommandQueue} from './command-queue';\n\n/**\n * Class used to draw stuff on the canvas.\n */\nexport abstract class Renderer {\n  /** The canvas element. */\n  protected _canvas: HTMLCanvasElement;\n\n  /** The camera used to render. */\n  private _camera: Camera;\n\n  /** The last command queue. */\n  private _commandQueue: CommandQueue|null = null;\n\n  /**\n   * @param canvas The canvas element.\n   */\n  public constructor(canvas: HTMLCanvasElement) {\n    this._canvas = canvas;\n    this._camera = new Camera(Vec2.ZERO, 1, this._canvas.width, this._canvas.height);\n    this._commandQueue = null;\n    this.resize();\n  }\n\n  /**\n   * Submits a new command queue to be drawn.\n   * @param queue The command queue to be drawn.\n   */\n  public submit(queue: CommandQueue): void {\n    this._commandQueue = queue;\n  }\n\n  /**\n   * Flushes the draw commands queue.\n   * @param time The current time.\n   */\n  public flush(time: number): void {\n    if (this._commandQueue === null) {\n      return;\n    }\n\n    // Interpolate the queue.\n    this._commandQueue = this._commandQueue.interpolate(time);\n\n    // Render the queue.\n    this.render();\n  }\n\n  /**\n   * Gets the camera used to render.\n   */\n  public get camera(): Camera {\n    return this._camera;\n  }\n\n  /**\n   * Should be called when the window is resized.\n   */\n  public resize(): void {\n    // Update the canvas size to match the window size.\n    this._canvas.width = window.innerWidth;\n    this._canvas.height = window.innerHeight;\n\n    // Update the camera's canvas size.\n    this._camera.width = this._canvas.width;\n    this._camera.height = this._canvas.height;\n  }\n\n  /**\n   * Renders the current frame.\n   */\n  protected abstract render(): void;\n\n  /**\n   * Executes all the draw commands.\n   * @param method The method used to draw the commands.\n   */\n  protected executeCommands(method: (command: Command) => void): void {\n    if (this._commandQueue === null) return;\n    for (const command of this._commandQueue) {\n      method(command);\n    }\n  }\n}\n","import {Color, Vec2} from '../math';\nimport {Command} from './command';\nimport {DrawArrow} from './draw-arrow';\nimport {DrawBox} from './draw-box';\nimport {DrawCircle} from './draw-circle';\nimport {DrawLine} from './draw-line';\n\n/** Represents a draw command queue. */\nexport class CommandQueue {\n  /** The commands in the queue. */\n  private _commands: Command[];\n\n  /** The time of the queue start. */\n  private _time: number;\n\n  // Default constructor.\n  public constructor(time: number) {\n    this._commands = [];\n    this._time = time;\n  }\n\n  /**\n   * Interpolates the queue to the given time.\n   * @param time The time to interpolate to.\n   */\n  public interpolate(time: number): CommandQueue {\n    const queue = new CommandQueue(time);\n    queue._commands = this._commands.map(command => command.interpolate(time - this._time));\n    return queue;\n  }\n\n  /**\n   * Iterates over the commands in the queue.\n   */\n  public[Symbol.iterator](): Iterator<Command> {\n    return this._commands[Symbol.iterator]();\n  }\n\n  /**\n   * Draws a moving box.\n   * @param center The center of the box.\n   * @param size The size of the box.\n   * @param color The color of the box.\n   * @param velocity The velocity of the box.\n   */\n  public drawMovingBox(center: Vec2, size: Vec2, color: Color, velocity: Vec2): void {\n    this._commands.push(new DrawBox(center, size, color, velocity));\n  }\n\n  /**\n   * Draws a moving circle.\n   * @param center The circle's center.\n   * @param radius The circle's radius.\n   * @param color The circle's color.\n   * @param velocity The circle's velocity.\n   */\n  public drawMovingCircle(center: Vec2, radius: number, color: Color, velocity: Vec2): void {\n    this._commands.push(new DrawCircle(center, radius, color, velocity));\n  }\n\n  /**\n   * Draws a moving line.\n   * @param start The start of the line.\n   * @param end The end of the line.\n   * @param thickness The thickness of the line.\n   * @param color The color of the line.\n   * @param startVelocity The start velocity of the line.\n   * @param endVelocity The end velocity of the line.\n   */\n  public drawMovingLine(\n      start: Vec2, end: Vec2, thickness: number, color: Color, startVelocity: Vec2, endVelocity: Vec2): void {\n    this._commands.push(new DrawLine(start, end, thickness, color, startVelocity, endVelocity));\n  }\n\n  /**\n   * Draws a moving arrow.\n   * @param start The start of the arrow.\n   * @param end The end of the arrow.\n   * @param thickness The thickness of the arrow.\n   * @param color The color of the arrow.\n   * @param startVelocity The start velocity of the arrow.\n   * @param endVelocity The end velocity of the arrow.\n   */\n  public drawMovingArrow(\n      start: Vec2, end: Vec2, thickness: number, color: Color, startVelocity: Vec2, endVelocity: Vec2): void {\n    this._commands.push(new DrawArrow(start, end, thickness, color, startVelocity, endVelocity));\n  }\n\n  /**\n   * Draws a box.\n   * @param center The center of the box.\n   * @param size The size of the box.\n   * @param color The color of the box.\n   */\n  public drawBox(center: Vec2, size: Vec2, color: Color): void {\n    this.drawMovingBox(center, size, color, Vec2.ZERO);\n  }\n\n  /**\n   * Draws a circle.\n   * @param center The circle's center.\n   * @param radius The circle's radius.\n   * @param color The circle's color.\n   */\n  public drawCircle(center: Vec2, radius: number, color: Color): void {\n    this.drawMovingCircle(center, radius, color, Vec2.ZERO);\n  }\n\n  /**\n   * Draws a line.\n   * @param start The start of the line.\n   * @param end The end of the line.\n   * @param thickness The thickness of the line.\n   * @param color The color of the line.\n   */\n  public drawLine(start: Vec2, end: Vec2, thickness: number, color: Color): void {\n    this.drawMovingLine(start, end, thickness, color, Vec2.ZERO, Vec2.ZERO);\n  }\n\n  /**\n   * Draws an arrow.\n   * @param start The start of the arrow.\n   * @param end The end of the arrow.\n   * @param thickness The thickness of the arrow.\n   * @param color The color of the arrow.\n   */\n  public drawArrow(start: Vec2, end: Vec2, thickness: number, color: Color): void {\n    this.drawMovingArrow(start, end, thickness, color, Vec2.ZERO, Vec2.ZERO);\n  }\n}\n","import {CommandQueue} from '../gl';\nimport {Vec2} from '../math';\n\nimport {Collider} from './collider';\n\n/**\n * Represents a physics body.\n */\nexport abstract class Body {\n  /** The position of the body. */\n  private _position: Vec2;\n\n  /**\n   * @param position The position of the body.\n   */\n  public constructor(position: Vec2) {\n    this._position = position;\n  }\n\n  /**\n   * Gets the position of the body.\n   */\n  public get position(): Vec2 {\n    return this._position;\n  }\n\n  /**\n   * Sets the position of the body.\n   */\n  public set position(position: Vec2) {\n    this._position = position;\n  }\n\n  /**\n   * Gets the collider used.\n   */\n  public abstract get collider(): Collider;\n\n  /**\n   * Draws the body.\n   * @param queue The command queue to draw to.\n   */\n  public abstract draw(queue: CommandQueue): void;\n}\n\n/**\n * Represents a kinematic body.\n */\nexport abstract class KinematicBody extends Body {\n  /** The velocity of the body. */\n  private _velocity: Vec2;\n\n  /**\n   * @param position The position of the body.\n   * @param velocity The velocity of the body.\n   * @param mass The mass of the body.\n   */\n  public constructor(position: Vec2, velocity: Vec2) {\n    super(position);\n    this._velocity = velocity;\n  }\n\n  /**\n   * Gets the velocity of the body.\n   */\n  public get velocity(): Vec2 {\n    return this._velocity;\n  }\n\n  /**\n   * Sets the velocity of the body.\n   */\n  public set velocity(velocity: Vec2) {\n    this._velocity = velocity;\n  }\n}\n\n/**\n * Represents a static body.\n */\nexport abstract class StaticBody extends Body {\n  /**\n   * @param position The position of the body.\n   */\n  public constructor(position: Vec2) {\n    super(position);\n  }\n}\n","/**\n * Represents a genome.\n */\nexport class Genome {\n  /** The genome's minimum neuron count. */\n  private _minNeuronCount: number;\n\n  /** The genome's maximum neuron count. */\n  private _maxNeuronCount: number;\n\n  /** The genome's minimum connection count. */\n  private _minConnectionCount: number;\n\n  /** The genome's maximum connection count. */\n  private _maxConnectionCount: number;\n\n  /**\n   * @param minNeuronCount The genome's minimum neuron count.\n   * @param maxNeuronCount The genome's maximum neuron count.\n   * @param minConnectionCount The genome's minimum connection count.\n   * @param maxConnectionCount The genome's maximum connection count.\n   */\n  public constructor(minNeuronCount: number, maxNeuronCount: number, minConnectionCount: number, maxConnectionCount: number) {\n    if (minNeuronCount > maxNeuronCount)\n      throw new Error('Genome creation failed: the minimum neuron count must be less than or equal to the maximum neuron count');\n    if (minConnectionCount > maxConnectionCount)\n      throw new Error('Genome creation failed: the minimum connection count must be less than or equal to the maximum connection count');\n\n    this._minNeuronCount = minNeuronCount;\n    this._maxNeuronCount = maxNeuronCount;\n    this._minConnectionCount = minConnectionCount;\n    this._maxConnectionCount = maxConnectionCount;\n  }\n\n  /**\n   * Gets the genome's minimum neuron count.\n   */\n  public get minNeuronCount(): number {\n    return this._minNeuronCount;\n  }\n\n  /**\n   * Gets the genome's maximum neuron count.\n   */\n  public get maxNeuronCount(): number {\n    return this._maxNeuronCount;\n  }\n\n  /**\n   * Gets the genome's minimum connection count.\n   */\n  public get minConnectionCount(): number {\n    return this._minConnectionCount;\n  }\n\n  /**\n   * Gets the genome's maximum connection count.\n   */\n  public get maxConnectionCount(): number {\n    return this._maxConnectionCount;\n  }\n}\n","/**\n * Represents a neural network connection between two neurons.\n */\nexport class Connection {\n  /** The amplitude of the weights of the connections. */\n  public static readonly WeightAmplitude: number = 10;\n\n  /** The connection's weight. */\n  private _weight: number;\n\n  /** The connection's source neuron. */\n  private _source: number;\n\n  /** The connection's target neuron. */\n  private _target: number;\n\n  /**\n   * @param weight The connection's denormalized weight.\n   * @param source The connection's source neuron.\n   * @param target The connection's target neuron.\n   */\n  public constructor(weight: number, source: number, target: number) {\n    this._weight = Connection.normalizeWeight(weight);\n    this._source = source;\n    this._target = source === target ? (source > 0 ? source - 1 : 1) : target;\n  }\n\n  /**\n   * Updates the connection.\n   * @param inputs The input neurons.\n   * @param outputs The output neurons.\n   */\n  public update(inputs: number[], outputs: number[]): void {\n    outputs[this._target] += inputs[this._source] * this._weight;\n  }\n\n  /**\n   * Gets the connection's source neuron.\n   */\n  public get source(): number {\n    return this._source;\n  }\n\n  /**\n   * Gets the connection's target neuron.\n   */\n  public get target(): number {\n    return this._target;\n  }\n\n  /**\n   * Gets the connection's weight.\n   */\n  public get weight(): number {\n    return this._weight;\n  }\n\n  /**\n   * Creates a random connection.\n   * @param neuronCount Number of neurons in the network.\n   * @returns A random connection.\n   */\n  public static random(neuronCount: number): Connection {\n    return new Connection(\n        Math.floor(Math.random() * 65536), Math.floor(Math.random() * neuronCount),\n        Math.floor(Math.random() * neuronCount));\n  }\n\n  /**\n   * Creates a connection from a 32 bits number.\n   * @param u32 The 32 bits number to create the connection from.\n   * @returns The connection.\n   */\n  public static fromU32(u32: number): Connection {\n    return new Connection(Connection.normalizeWeight(u32 >> 16), (u32 >> 8) & 0xFF, u32 & 0xFF);\n  }\n\n  /**\n   * Converts the connection to 32 bits number.\n   * @returns The connection as 32 bits number.\n   */\n  public toU32(): number {\n    return (Connection.denormalizeWeight(this._weight) << 16) | (this._source << 8) | this._target;\n  }\n\n  /**\n   * Normalizes the connection's weight.\n   * @param weight The denormalized connection's weight.\n   * @returns The normalized connection's weight.\n   */\n  private static normalizeWeight(weight: number): number {\n    weight = Math.min(Math.max(weight, 0), 65535);\n    return ((weight / 65535) * 2.0 - 1.0) * Connection.WeightAmplitude;\n  }\n\n  /**\n   * Denormalizes the connection's weight.\n   * @param weight The normalized connection's weight.\n   * @returns The denormalized connection's weight.\n   */\n  private static denormalizeWeight(weight: number): number {\n    return ((weight / this.WeightAmplitude) + 1.0) * 65535;\n  }\n}","import {Connection} from './connection';\nimport {Genome} from './genome';\n\n/**\n * Represents an instance of a genome, which can be mutated and crossed over with other genotypes.\n */\nexport class Genotype {\n  /** The genome of this genotype. */\n  private _genome: Genome;\n\n  /** The neuron count of this genotype. */\n  private _neuronCount: number;\n\n  /** The connections of this genotype. */\n  private _connections: Connection[];\n\n  /**\n   * @param genome The genome of this genotype.\n   * @param neuronCount The neuron count of this genotype.\n   * @param connections The connections of this genotype.\n   */\n  private constructor(genome: Genome, neuronCount: number, connections: Connection[]) {\n    this._genome = genome;\n    this._neuronCount = neuronCount;\n    this._connections = connections;\n  }\n\n  /**\n   * Creates a new random genotype.\n   * @param genome The genome of this genotype.\n   * @returns A new random genotype.\n   */\n  public static random(genome: Genome): Genotype {\n    let neuronCount =\n        Math.round(Math.random() * (genome.maxNeuronCount - genome.minNeuronCount)) + genome.minNeuronCount;\n    let connectionCount =\n        Math.round(Math.random() * (genome.maxConnectionCount - genome.minConnectionCount)) + genome.minConnectionCount;\n    let connections = new Array<Connection|null>(connectionCount).fill(null).map(() => Connection.random(neuronCount));\n    return new Genotype(genome, neuronCount, connections);\n  }\n\n  /**\n   * Gets the genome of this genotype.\n   */\n  public get genome(): Genome {\n    return this._genome;\n  }\n\n  /**\n   * Gets the neuron count of this genotype.\n   */\n  public get neuronCount(): number {\n    return this._neuronCount;\n  }\n\n  /**\n   * Gets the connections of this genotype.\n   */\n  public get connections(): Connection[] {\n    return this._connections;\n  }\n\n  /**\n   * Mutates this genotype.\n   * @param rate The mutation rate.\n   * @returns The mutated genotype.\n   */\n  public mutate(rate: number): Genotype {\n    let neuronCount = this.neuronCount;\n\n    // Change the neuron count.\n    if (Math.random() < rate) {\n      let delta = Math.random() < 0.5 ? 1 : -1;\n      let newNeuronCount = this.neuronCount + delta;\n      if (newNeuronCount >= this.genome.minNeuronCount && newNeuronCount <= this.genome.maxNeuronCount)\n        neuronCount = newNeuronCount;\n    }\n\n    // Change the connections.\n    let connections = this.connections\n                          .map(connection => {\n                            if (Math.random() < rate)\n                              return Connection.random(neuronCount);\n                            else if (Math.random() < rate / this.connections.length)\n                              return null;  // Remove the connection.\n                            else if (connection.source < neuronCount && connection.target < neuronCount)\n                              return connection;\n                            else\n                              return null;\n                          })\n                          .filter(connection => connection !== null) as Connection[];\n    // Add a connection.\n    if (connections.length < this.genome.maxConnectionCount && Math.random() < rate)\n      connections.push(Connection.random(neuronCount));\n\n    return new Genotype(this._genome, neuronCount, connections);\n  }\n}","import {CommandQueue} from '../gl';\nimport {Color, Vec2} from '../math';\nimport {Connection} from './connection';\n\n/**\n * Neural network implementation.\n */\nexport class Network {\n  /** Neural network neurons. */\n  private _neurons: number[];\n\n  /** Input neurons. */\n  private _inputs: number[];\n\n  /** Output neurons. */\n  private _outputs: number[];\n\n  /** Neural network swap neurons. */\n  private _swapNeurons: number[];\n\n  /** Neural network connections. */\n  private _connections: Connection[];\n\n  /**\n   * @param neuronCount Number of neurons in the network.\n   * @param connections The connections in the network.\n   */\n  public constructor(neuronCount: number, connections: Connection[]) {\n    this._neurons = new Array(neuronCount).fill(0);\n    this._swapNeurons = new Array(neuronCount).fill(0);\n    this._connections = connections;\n    this._inputs = [];\n    this._outputs = [];\n  }\n\n  /**\n   * Sets the value of a neuron.\n   * @param index Index of the neuron to set.\n   * @param value Value to set the neuron to.\n   */\n  public set(index: number, value: number): void {\n    this._neurons[index] = value;\n  }\n\n  /**\n   * Gets the value of a neuron.\n   * @param index Index of the neuron to get.\n   * @returns Neuron value.\n   */\n  public get(index: number): number {\n    return this._neurons[index];\n  }\n\n  /**\n   * Marks a neuron as an input for drawing.\n   * @param index Index of the neuron to mark as an input.\n   */\n  public markInput(index: number): void {\n    this._inputs.push(index);\n  }\n\n  /**\n   * Marks a neuron as an output for drawing.\n   * @param index Index of the neuron to mark as an output.\n   */\n  public markOutput(index: number): void {\n    this._outputs.push(index);\n  }\n\n  /**\n   * Resets the network.\n   */\n  public reset(): void {\n    this._neurons.fill(0);\n  }\n\n  /**\n   * Updates the network's neurons.\n   */\n  public update(): void {\n    for (let i = 0; i < this._connections.length; i++) this._connections[i].update(this._neurons, this._swapNeurons);\n    for (let i = 0; i < this._neurons.length; i++) {\n      this._neurons[i] = Network.sigmoid(this._swapNeurons[i]);\n      this._swapNeurons[i] = 0;\n    }\n  }\n\n  /**\n   * Draws the neural network.\n   * @param queue Command queue to draw the network with.\n   * @param translation Where to draw the network.\n   * @param velocity Velocity of the network.\n   * @param scale The scale to draw the network at.\n   */\n  public draw(queue: CommandQueue, translation: Vec2, velocity: Vec2, scale: number): void {\n    const CIRCLE_RADIUS = scale * 0.5;\n    const NEURON_RADIUS = scale * 0.1;\n    const CONNECTION_THICKNESS = NEURON_RADIUS * 1;\n\n    // Draw all connections in the network.\n    for (let i = 0; i < this._connections.length; i++) {\n      const connection = this._connections[i];\n      const from = translation.add(Vec2.new(\n          Math.cos(connection.source / this._neurons.length * Math.PI * 2) * (CIRCLE_RADIUS - NEURON_RADIUS),\n          Math.sin(connection.source / this._neurons.length * Math.PI * 2) * (CIRCLE_RADIUS - NEURON_RADIUS)));\n      const to = translation.add(Vec2.new(\n          Math.cos(connection.target / this._neurons.length * Math.PI * 2) * (CIRCLE_RADIUS - NEURON_RADIUS) ,\n          Math.sin(connection.target / this._neurons.length * Math.PI * 2) * (CIRCLE_RADIUS - NEURON_RADIUS)));\n      const color = connection.weight > 0 ? Color.black().mix(Color.new(1, 0, 0), connection.weight / 10) :\n                                            Color.new(0, 0, 1).mix(Color.black(), -connection.weight / 10);\n      queue.drawMovingArrow(from, to, CONNECTION_THICKNESS, color, velocity, velocity);\n    }\n\n    // Draw all neurons in the network.\n    for (let i = 0; i < this._neurons.length; i++) {\n      const position = translation.add(Vec2.new(\n          Math.cos(i / this._neurons.length * Math.PI * 2) * CIRCLE_RADIUS,\n          Math.sin(i / this._neurons.length * Math.PI * 2) * CIRCLE_RADIUS));\n      const color = Color.black().mix(Color.white(), this._neurons[i]);\n      let borderColor;\n      if (this._inputs.indexOf(i) >= 0)\n        borderColor = Color.new(0, 1, 0);\n      else if (this._outputs.indexOf(i) >= 0)\n        borderColor = Color.new(0, 0, 1);\n      else\n        borderColor = Color.new(1, 1, 1);\n      queue.drawMovingCircle(position, NEURON_RADIUS, borderColor, velocity);\n      queue.drawMovingCircle(position, NEURON_RADIUS * 0.9, color, velocity);\n    }\n  }\n\n  /**\n   * The sigmoid function.\n   * @param x Value to apply the sigmoid function to.\n   * @returns The sigmoid value of the input.\n   */\n  private static sigmoid(x: number): number {\n    return 1 / (1 + Math.exp(-x));\n  }\n}\n","import {Genome} from './genome';\nimport {Genotype} from './genotype';\n\n/**\n * Represents a population of genotypes.\n */\nexport class Population {\n  /** The genome of the population. */\n  private _genome: Genome;\n\n  /** The genotypes in the population. */\n  private _genotypes: Genotype[];\n\n  /** The mutation rate. */\n  private _mutationRate: number;\n\n  /**\n   * @param genome The genome of the population.\n   * @param genotypes The genotypes of the population.\n   * @param mutationRate The mutation rate.\n   */\n  public constructor(genome: Genome, genotypes: Genotype[], mutationRate: number) {\n    if (genotypes.length % 2 !== 0) throw new Error('The number of genotypes in a population must be even.');\n    this._genome = genome;\n    this._genotypes = genotypes;\n    this._mutationRate = mutationRate;\n  }\n\n  /**\n   * Creates a new random population.\n   * @param genome The genome of the population.\n   * @param genotypeCount The number of genotypes in the population.\n   * @param mutationRate The mutation rate.\n   */\n  public static random(genome: Genome, genotypeCount: number, mutationRate: number): Population {\n    let genotypes = new Array<Genotype|null>(genotypeCount).fill(null).map(() => Genotype.random(genome));\n    return new Population(genome, genotypes, mutationRate);\n  }\n\n  /**\n   * Gets the population's genotypes.\n   */\n  public get genotypes(): Genotype[] {\n    return this._genotypes;\n  }\n\n  /**\n   * Selects the parents of the next generation.\n   * @parma fitness The fitness of the population.\n   * @returns The indices of the parents.\n   */\n  public select(fitness: number[]): number[] {\n    let sortedFitness = fitness.map((f, i) => [f, i]).sort(([a, _1], [b, _2]) => b - a);\n    let parents = new Array<number>(this._genotypes.length);\n    for (let i = 0; i < parents.length / 2; i++) {\n      parents[2 * i + 0] = sortedFitness[i][1];\n      parents[2 * i + 1] = sortedFitness[i][1];\n    }\n    return parents;\n  }\n\n  /**\n   * Creates a new population from this one, by making the genotypes reproduce.\n   * @param parents The indices of the parents of the new population.\n   * @returns A new population.\n   */\n  public breed(parents: number[]): Population {\n    let newGenotypes = new Array<Genotype|null>(this._genotypes.length)\n                           .fill(null)\n                           .map((_, i) => this._genotypes[parents[i]].mutate(this._mutationRate));\n    return new Population(this._genome, newGenotypes, this._mutationRate);\n  }\n}\n","import {Vec2} from '../math';\n\n/**\n * Represents a collision manifold.\n */\nexport class Manifold {\n  /** The normal of the collision. */\n  public normal: Vec2;\n\n  /** The penetration depth of the collision. */\n  public penetration: number;\n\n  /**\n   * @param normal The normal of the collision.\n   * @param penetration The penetration depth of the collision.\n   */\n  public constructor(normal: Vec2, penetration: number) {\n    this.normal = normal;\n    this.penetration = penetration;\n  }\n}\n\n/**\n * Represents a generic collider.\n */\nexport interface Collider {\n  /**\n   * Checks if the collider is colliding with another collider.\n   * @param other The other collider.\n   * @returns Collision manifold if colliding, otherwise null.\n   */\n  colliding(other: Collider): Manifold|null;\n}\n\n/**\n * Represents a circle collider.\n */\nexport class CircleCollider implements Collider {\n  /** The position of the circle. */\n  public position: Vec2;\n\n  /** The radius of the circle. */\n  public radius: number;\n\n  /**\n   * @param position The position of the circle.\n   * @param radius The radius of the circle.\n   */\n  public constructor(position: Vec2, radius: number) {\n    this.position = position;\n    this.radius = radius;\n  }\n\n  // Collision detection.\n  public colliding(other: Collider): Manifold|null {\n    if (other instanceof CircleCollider) {  // Circle vs Circle\n      const offset = other.position.sub(this.position);\n      const distanceSquared = offset.lengthSquared();\n      const radiusSum = this.radius + other.radius;\n\n      // Check if the circles are colliding\n      if (distanceSquared > radiusSum * radiusSum) return null;\n\n      // Get the collision manifold\n      const normal = offset.normalize();\n      const penetration = radiusSum - Math.sqrt(distanceSquared);\n      return new Manifold(normal, penetration);\n    } else {\n      const manifold = other.colliding(this);\n      manifold?.normal.mul(-1.0);\n      return manifold;\n    }\n  }\n}\n\n/**\n * Represents a AABB collider.\n */\nexport class AABBCollider implements Collider {\n  /** The top left corner of the rectangle. */\n  public start: Vec2;\n\n  /** The bottom right corner of the rectangle. */\n  public end: Vec2;\n\n  /**\n   * @param start The top right corner of the rectangle.\n   * @param end The bottom left corner of the rectangle.\n   */\n  public constructor(start: Vec2, end: Vec2) {\n    this.start = start.max(end);\n    this.end = start.min(end);\n  }\n\n  // Collision detection.\n  public colliding(other: Collider): Manifold|null {\n    if (other instanceof AABBCollider) {\n      // AABB vs AABB\n      throw new Error('AABB vs AABB not implemented');\n    } else if (other instanceof CircleCollider) {\n      // AABB vs Circle\n      const halfExtents = this.start.sub(this.end).div(2);\n      const center = this.start.add(this.end).div(2);\n      const clamped = other.position.sub(center).clamp(halfExtents.mul(-1), halfExtents);\n      const closest = clamped.add(center);\n      const offset = closest.sub(other.position);\n      if (offset.lengthSquared() > other.radius * other.radius) return null;\n      const normal = offset.normalize();\n      const penetration = other.radius - offset.length();\n      return new Manifold(normal, penetration);\n    } else {\n      const manifold = other.colliding(this);\n      manifold?.normal.mul(-1.0);\n      return manifold;\n    }\n  }\n}\n\n/**\n * Group of colliders.\n */\nexport class GroupCollider implements Collider {\n  /** The colliders in the group. */\n  private _colliders: Collider[];\n\n  /**\n   * @param colliders The colliders in the group.\n   */\n  public constructor(colliders: Collider[]) {\n    this._colliders = colliders;\n  }\n\n  // Collision detection.\n  public colliding(other: Collider): Manifold|null {\n    for (const collider of this._colliders) {\n      const manifold = collider.colliding(other);\n      if (manifold) return manifold;\n    }\n    return null;\n  }\n}\n","import {Genotype, Network} from '../evo';\nimport {CommandQueue} from '../gl';\nimport {Color, Mat3, Vec2} from '../math';\n\nimport {KinematicBody} from './body';\nimport {CircleCollider, Collider} from './collider';\nimport {Food} from './food';\n\n/** Radius of a creature. */\nconst CREATURE_RADIUS = 0.05;\n\n/** The movement speed. */\nconst MOVEMENT_SPEED = 1.0;\n\n/** The rotation speed. */\nconst ROTATION_SPEED = 5.0;\n\n/**\n * Represents a creature in the simulation.\n */\nexport class Creature extends KinematicBody {\n  /** The creature's radius. */\n  public static readonly Radius = CREATURE_RADIUS;\n\n  /** The creature's fitness. */\n  public fitness: number;\n\n  /** The creature's genotype. */\n  private _genotype: Genotype;\n\n  /** The creature's color. */\n  private _color: Color;\n\n  /** The creature's eye angles. */\n  private _eyes: number[];\n\n  /** The neural network of the creature. */\n  private _nn: Network;\n\n  /** The forward direction of the creature. */\n  private _forward: Vec2;\n\n  /** The rotation velocity of the creature. */\n  private _rotationVelocity: number;\n\n  /**\n   * @param eyeCount The number of eyes.\n   * @param genotype The genotype of the creature.\n   * @param position The position of the creature.\n   * @param forward The forward direction of the creature.\n   * @param color The color of the creature.\n   */\n  public constructor(eyeCount: number, genotype: Genotype, position: Vec2, forward: Vec2, color: Color) {\n    super(position, Vec2.ZERO);\n    this._genotype = genotype;\n    this._nn = new Network(genotype.neuronCount, genotype.connections);\n    for (let i = 0; i < eyeCount; i++)\n      this._nn.markInput(i);\n    this._nn.markOutput(eyeCount);\n    this._nn.markOutput(eyeCount + 1);\n    this._forward = forward.normalize();\n    this._color = color.clone();\n    this.fitness = 0;\n\n    // Set the eye angles.\n    this._eyes = [];\n    if (eyeCount == 1)\n      this._eyes = [0];\n    else if (eyeCount == 2)\n      this._eyes = [-Math.PI / 4, Math.PI / 4];\n    else if (eyeCount == 3)\n      this._eyes = [-Math.PI / 3, 0, Math.PI / 3];\n  }\n\n  /**\n   * Gets the number of neurons of the creature's neural network.\n   * @param eyeCount The number of eyes.\n   * @param extraNeuronCount The number of extra neurons.\n   * @returns The topology of a creature's neural network.\n   */\n  public static getNeuronCount(eyeCount: number, extraNeuronCount: number): number {\n    return eyeCount + extraNeuronCount + 2;\n  }\n\n  /**\n   * Updates the creature.\n   * @param nearestFood The nearest food.\n   * @param dt The time step.\n   */\n  public update(nearestFood: Food|null, dt: number): void {\n    // Update the creature's neural network inputs.\n    for (let i = 0; i < this._eyes.length; i++) {\n      const eye = this._forward.apply(Mat3.rotation(this._eyes[i])).normalize();\n      let distance = 0;\n      if (nearestFood === null)\n        distance = Infinity;\n      else\n        distance = nearestFood.position.sub(this.position.add(eye)).length();\n      this._nn.set(i, distance);\n    }\n\n    // Update the creature's neural network outputs.\n    this._nn.update();\n\n    // Update the creature's velocity and rotate it.\n    const dir = this._nn.get(this._eyes.length) > this._nn.get(this._eyes.length + 1) ? -1 : 1;\n    this._rotationVelocity = dir * ROTATION_SPEED;\n    this._forward = this._forward.apply(Mat3.rotation(this._rotationVelocity * dt));\n    this.velocity = this._forward.mul(MOVEMENT_SPEED);\n  }\n\n  /**\n   * Gets the genome of the creature.\n   */\n  public get genotype(): Genotype {\n    return this._genotype;\n  }\n\n  /**\n   * Gets the neural network of the creature.\n   */\n  public get nn(): Network {\n    return this._nn;\n  }\n\n  // Gets the creature's collider.\n  public override get collider(): Collider {\n    return new CircleCollider(this.position, CREATURE_RADIUS);\n  }\n\n  // Draw the creature.\n  public override draw(queue: CommandQueue): void {\n    for (let i = 0; i < this._eyes.length; i++) {\n      const eyeDir = this._forward.apply(Mat3.rotation(this._eyes[i]));\n      const eyeNextDir = this._forward.apply(Mat3.rotation(this._eyes[i] - this._rotationVelocity));\n      const eye = this.position.add(eyeDir.mul(CREATURE_RADIUS * 2));\n      const eyeNext = this.position.add(eyeNextDir.mul(CREATURE_RADIUS * 2));\n      const eyeVelocity = this.velocity.add(eyeNext.sub(eye));\n      queue.drawMovingLine(\n          this.position, eye, CREATURE_RADIUS * 4, this._color.mix(Color.black(), 0.2), this.velocity, eyeVelocity);\n      queue.drawMovingCircle(eye, CREATURE_RADIUS * 0.25, this._color.mix(Color.black(), 0.2), eyeVelocity);\n    }\n\n    queue.drawMovingCircle(this.position, CREATURE_RADIUS, this._color, this.velocity);\n  }\n}\n","import {CommandQueue} from '../gl';\nimport {Color, Vec2} from '../math';\nimport {StaticBody} from './body';\nimport {CircleCollider, Collider} from './collider';\n\n/** The food radius. */\nconst FOOD_RADIUS = 0.02;\n\n/** The food color. */\nconst FOOD_COLOR = Color.new(0.2, 0.9, 0.4);\n\n/**\n * Represents a bullet.\n */\nexport class Food extends StaticBody {\n  /** The food's radius. */\n  public static readonly Radius = FOOD_RADIUS;\n\n  /**\n   * @param position The position of the food.\n   */\n  public constructor(position: Vec2) {\n    super(position);\n  }\n\n  /**\n   * Gets the collider used.\n   */\n  public override get collider(): Collider {\n    return new CircleCollider(this.position, FOOD_RADIUS);\n  }\n\n  // Draws the food.\n  public override draw(queue: CommandQueue): void {\n    queue.drawCircle(this.position, FOOD_RADIUS, FOOD_COLOR);\n  }\n}\n","import {Genome, Population} from '../evo';\nimport {CommandQueue} from '../gl';\nimport {Color, Vec2} from '../math';\nimport {CircleCollider} from './collider';\nimport {Creature} from './creature';\nimport {Food} from './food';\n\n/** The simulation time step. */\nexport const TIME_STEP = 1.0 / 30.0;\n\n/** The boundaries radius. */\nexport const BOUNDARY_RADIUS = 12.0;\nexport const BOUNDARY_THICKNESS = 0.05;\n\n/**\n * The settings for the stage.\n */\nexport class StageSettings {\n  public population: number;\n  public mutationRate: number;\n  public eyeCount: number;\n  public minExtraNeuronCount: number;\n  public maxExtraNeuronCount: number;\n  public minConnectionCount: number;\n  public maxConnectionCount: number;\n  public initialFoodCount: number;\n  public newFoodRate: number;\n  public roundDuration: number;\n};\n\n/**\n * Represents the simulation's stage, where the creatures are tested.\n */\nexport class Stage {\n  /** The stage settings. */\n  private _settings: StageSettings;\n\n  /** The genome of the creatures. */\n  private _genome: Genome;\n\n  /** The population of creatures. */\n  private _population: Population;\n\n  /** The creatures in the stage. */\n  private _creatures: Creature[];\n\n  /** The food in the simulation. */\n  private _food: Food[];\n\n  /** The amount of food to generate. */\n  private _newFoodAccumulator: number;\n\n  /** The time that has passed since the beginning of the round. */\n  private _time: number;\n\n  /**\n   * @param settings The settings for the stage.\n   */\n  public constructor(settings: StageSettings) {\n    this._settings = settings;\n    this._genome = new Genome(\n        Creature.getNeuronCount(settings.eyeCount, settings.minExtraNeuronCount),\n        Creature.getNeuronCount(settings.eyeCount, settings.maxExtraNeuronCount), settings.minConnectionCount,\n        settings.maxConnectionCount);\n    this._population = Population.random(this._genome, settings.population, settings.mutationRate);\n\n    this._creatures = [];\n    this._food = [];\n\n    // Start the first round.\n    this.startRound();\n  }\n\n  /**\n   * Starts a new round.\n   */\n  public startRound(): void {\n    if (this._creatures.length !== 0) {\n      // Select the best creatures from the previous round.\n      let fitness = this._creatures.map(creature => creature.fitness);\n      let parents = this._population.select(fitness);\n      this._population = this._population.breed(parents);\n    }\n\n    // Create the creatures.\n    this._creatures = this._population.genotypes.map(genotype => {\n      let position = this.randomPosition(Creature.Radius);\n      let color = Color.random();\n      return new Creature(this._settings.eyeCount, genotype, position, position, color);\n    });\n\n    // Create the food.\n    this._food = [];\n    for (let i = 0; i < this._settings.initialFoodCount; i++)\n      this._food.push(new Food(this.randomPosition(Food.Radius)));\n    this._newFoodAccumulator = 0;\n    this._time = 0;\n  }\n\n  /**\n   * Updates the stage.\n   * @returns Whether the round is over.\n   */\n  public update(): boolean {\n    // Check if the round ended.\n    if (this._food.length === 0 || this._time > this._settings.roundDuration) {\n      for (const creature of this._creatures) creature.velocity = Vec2.ZERO;\n      return true;\n    }\n\n    this._time += TIME_STEP;\n\n    // Add new food.\n    this._newFoodAccumulator += TIME_STEP * this._settings.newFoodRate;\n    while (this._newFoodAccumulator >= 1) {\n      this._newFoodAccumulator -= 1;\n      this._food.push(new Food(this.randomPosition(Food.Radius)));\n    }\n\n    // Update the creatures.\n    this._creatures.forEach(creature => creature.update(this.getClosestFood(creature.position), TIME_STEP));\n    this._creatures.forEach(creature => creature.position = creature.position.add(creature.velocity.mul(TIME_STEP)));\n\n    // Test for collisions between creatures and the bounds.\n    this._creatures.forEach(creature => {\n      if (creature.position.lengthSquared() > (BOUNDARY_RADIUS - Creature.Radius) ** 2) {\n        creature.position = creature.position.normalize();\n        creature.velocity = creature.velocity.reflect(creature.position);\n        creature.position = creature.position.mul(BOUNDARY_RADIUS - Creature.Radius);\n      }\n    });\n\n    // Test for collisions between creatures and food.\n    this._creatures.forEach(creature => {\n      for (let i = this._food.length - 1; i >= 0; i--)\n        if (creature.collider.colliding(this._food[i].collider)) {\n          creature.fitness += 1;\n          this._food.splice(i, 1);\n        }\n    });\n\n    // Round is not over.\n    return false;\n  }\n\n  /**\n   * Draws the stage.\n   * @param queue The command queue to draw to.\n   */\n  public draw(queue: CommandQueue): void {\n    queue.drawCircle(Vec2.ZERO, BOUNDARY_RADIUS + BOUNDARY_THICKNESS, Color.new(0.0, 0.0, 0.0));\n    queue.drawCircle(Vec2.ZERO, BOUNDARY_RADIUS, Color.new(0.3, 0.6, 0.9));\n    this._food.forEach(food => food.draw(queue));\n    this._creatures.forEach(creature => creature.draw(queue));\n  }\n\n  /**\n   * Picks a creature from a position.\n   * @param position The position to pick from.\n   * @returns The creature, or null if none was found.\n   */\n  public pickCreature(position: Vec2): Creature|null {\n    for (const creature of this._creatures)\n      if (creature.collider.colliding(new CircleCollider(position, 0.00001))) return creature;\n    return null;\n  }\n\n  /**\n   * Gets the best creature in the stage.\n   * @returns The best creature, or null if none was found.\n   */\n  public getBestCreature(): Creature|null {\n    if (this._creatures.length === 0) return null;\n    let best = this._creatures[0];\n    for (const creature of this._creatures)\n      if (creature.fitness > best.fitness) best = creature;\n    return best;\n  }\n\n  /**\n   * Generates a random position within the stage.\n   * @param radius The minimum distance from the edge.\n   * @return The random position.\n   */\n  private randomPosition(radius: number): Vec2 {\n    const distance = Math.sqrt(Math.random() * (BOUNDARY_RADIUS - radius) ** 2);\n    const angle = Math.random() * Math.PI * 2;\n    return Vec2.fromAngle(angle).mul(distance);\n  }\n\n  /**\n   * Gets the closest food to a position.\n   * @param position The position.\n   * @return The closest food.\n   */\n  private getClosestFood(position: Vec2): Food|null {\n    let closestFood: Food|null = null;\n    let closestDistance = Infinity;\n    this._food.forEach(food => {\n      const distance = position.sub(food.position).length();\n      if (distance < closestDistance) {\n        closestFood = food;\n        closestDistance = distance;\n      }\n    });\n    return closestFood;\n  }\n}\n","/**\n * Represents a UI button.\n */\nexport class Button {\n  /** The DOM element that represents the button. */\n  protected readonly _element: HTMLButtonElement;\n\n  /** The on click callbacks. */\n  private _onClick: Set<() => void>;\n\n  /**\n   * @param element The DOM element that represents the button.\n   */\n  private constructor(element: HTMLButtonElement) {\n    this._element = element;\n    this._onClick = new Set<() => void>();\n    this._element.addEventListener('click', () => {\n      this._onClick.forEach(callback => callback());\n    });\n  }\n\n  /**\n   * Creates a new button from an element.\n   * @param element The element.\n   * @return The button.\n   */\n  public static fromElement(element: Element): Button|null {\n    if (element instanceof HTMLButtonElement)\n      return new Button(element);\n    else\n      return null;\n  }\n\n  /**\n   * Creates a new button from a query selector to find the element.\n   * @param root The root element.\n   * @param selector The query selector.\n   * @return The button.\n   */\n  public static fromSelector(root: Element, selector: string): Button|null {\n    const element = root.querySelector(selector);\n    if (element)\n      return Button.fromElement(element);\n    else\n      return null;\n  }\n\n  /**\n   * Adds a callback to the on click callback set.\n   * @param callback The callback to add.\n   */\n  public addOnClickCallback(callback: () => void): void {\n    this._onClick.add(callback);\n  }\n\n  /**\n   * Removes a callback from the on click callback set.\n   * @param callback The callback to remove.\n   */\n  public removeOnClickCallback(callback: () => void): void {\n    this._onClick.delete(callback);\n  }\n\n  /**\n   * Clears the on click callback set.\n   */\n  public clearOnClickCallbacks(): void {\n    this._onClick.clear();\n  }\n\n  /**\n   * Gets the DOM element that represents the button.\n   */\n  public get element(): HTMLButtonElement {\n    return this._element;\n  }\n}","/**\n * Used to display a single value.\n */\nexport class Display {\n  /** Display root element. */\n  private _element: HTMLElement;\n\n  /** Display DOM element. */\n  private _display: HTMLElement;\n\n  /**\n   * @param element DOM element to display value in.\n   */\n  public constructor(element: HTMLElement) {\n    this._element = element;\n    this._display = this._element.querySelector('span')!;\n  }\n\n  /**\n   * Creates a display from a DOM element.\n   * @param element DOM element to display value in.\n   * @returns Display instance.\n   */\n  public static fromElement(element: HTMLElement): Display|null {\n    if (element.classList.contains('display'))\n      return new Display(element);\n    else\n      return null;\n  }\n\n  /**\n   * Creates a display from a query selector.\n   * @param root Root element to search from.\n   * @param selector Query selector to find display in.\n   * @returns Display instance.\n   */\n  public static fromSelector(root: HTMLElement, selector: string): Display|null {\n    const element = root.querySelector(selector);\n    if (element && element instanceof HTMLDivElement)\n      return Display.fromElement(element);\n    else\n      return null;\n  }\n\n  /**\n   * Sets the value to display.\n   */\n  public set value(value: number) {\n    this._display.innerText = value.toString();\n  }\n\n  /**\n   * Gets the value to display.\n   */\n  public get value(): number {\n    return parseFloat(this._display.innerText);\n  }\n\n  /**\n   * Sets the display's visibility.\n   */\n  public set visible(visible: boolean) {\n    this._element.classList.toggle('hidden', !visible);\n  }\n\n  /**\n   * Gets the display's visibility.\n   */\n  public get visible(): boolean {\n    return !this._element.classList.contains('hidden');\n  }\n}","/**\n * Represents an input element which can be used to get a value from the user.\n * @tparam Type The type of the value.\n */\nexport abstract class Input<Type> {\n  /** The current value. */\n  private _value: Type;\n\n  /** The on value changed callbacks. */\n  private _onValueChanged: Set<(value: Type) => void>;\n\n  /**\n   * @param initial The initial value.\n   */\n  protected constructor(initial: Type) {\n    this._value = initial;\n    this._onValueChanged = new Set<(value: Type) => void>();\n  }\n\n  /**\n   * Gets the value of the input.\n   */\n  public get value(): Type {\n    return this._value;\n  }\n\n  /**\n   * Sets the value of the input.\n   */\n  set value(value: Type) {\n    const newValue = this.validate(value);\n    if (newValue === this._value) return;\n    this._value = newValue;\n    this.updateDisplay();\n    this._onValueChanged.forEach(callback => callback(this._value));\n  }\n\n  /**\n   * Validates the value of the input.\n   * @param value The value to validate.\n   * @return The validated value.\n   */\n  protected abstract validate(value: Type): Type;\n\n  /**\n   * Updates the display of the input.\n   */\n  protected abstract updateDisplay(): void;\n\n  /**\n   * Adds a callback to be called when the value of the input changes.\n   * @param callback The callback.\n   */\n  public addOnValueChangedCallback(callback: (value: Type) => void): void {\n    this._onValueChanged.add(callback);\n  }\n\n  /**\n   * Removes a callback from being called when the value of the input changes.\n   * @param callback The callback.\n   */\n  public removeOnValueChangedCallback(callback: (value: Type) => void): void {\n    this._onValueChanged.delete(callback);\n  }\n}\n","import {Input} from './input';\n\ntype RangeType = 'integer';\n\n/**\n * Implements an input range.\n */\nexport class Range extends Input<[number, number]> {\n  /** The track element. */\n  private _track: HTMLDivElement;\n\n  /** The left thumb wrapper element. */\n  private _leftThumbWrapper: HTMLDivElement;\n\n  /** The left thumb element. */\n  private _leftThumb: HTMLButtonElement;\n\n  /** The right thumb wrapper element. */\n  private _rightThumbWrapper: HTMLDivElement;\n\n  /** The right thumb element. */\n  private _rightThumb: HTMLButtonElement;\n\n  /** The display element. */\n  private _display: HTMLElement;\n\n  /** The minimum value. */\n  private _min: number;\n\n  /** The maximum value. */\n  private _max: number;\n\n  /** The step value. */\n  private _step: number;\n\n  /** The range's type. */\n  private _type: RangeType;\n\n  /** Is the mouse down? */\n  private _mouseDown: 'left'|'right'|null;\n\n  /**\n   * @param element The DOM element that represents the slider.\n   */\n  public constructor(element: HTMLDivElement) {\n    // Get attributes.\n    let min = parseFloat(element.getAttribute('min') ?? '1');\n    if (min !== min) min = 1;\n    let max = parseFloat(element.getAttribute('max') ?? '100');\n    if (max !== max) max = 100;\n    [min, max] = [Math.min(min, max), Math.max(min, max)];\n    let step = parseFloat(element.getAttribute('step') ?? '1');\n    if (step !== step) step = 1;\n    const type = element.getAttribute('type') ?? 'integer';\n    if (type != 'integer') throw new Error(`Invalid range type: ${type}`);\n\n    // Initialize properties.\n    super([min, max]);\n    this._min = min;\n    this._max = max;\n    this._step = step;\n    this._type = type;\n    this._mouseDown = null;\n\n    // Init track and thumb.\n    this._track = element.querySelector('div') as HTMLDivElement;\n    this._leftThumbWrapper = this._track.querySelector('div.left') as HTMLDivElement;\n    this._leftThumb = this._leftThumbWrapper.querySelector('button') as HTMLButtonElement;\n    this._leftThumb.addEventListener('mousedown', () => this._mouseDown = 'left');\n    this._rightThumbWrapper = this._track.querySelector('div.right') as HTMLDivElement;\n    this._rightThumb = this._rightThumbWrapper.querySelector('button') as HTMLButtonElement;\n    this._rightThumb.addEventListener('mousedown', () => this._mouseDown = 'right');\n\n    document.addEventListener('mouseup', () => this._mouseDown = null);\n    document.addEventListener('mousemove', (e: MouseEvent) => {\n      if (this._mouseDown === 'left') {\n        const rect = this._track.getBoundingClientRect();\n        const delta = Math.max(0, Math.min(1, (e.clientX - rect.left) / rect.width));\n        if (this._type === 'integer')\n          this.value =\n              [Math.min(Math.round(this._min + delta * (this._max - this._min)), this.value[1]), this.value[1]];\n      } else if (this._mouseDown === 'right') {\n        const rect = this._track.getBoundingClientRect();\n        const delta = Math.max(0, Math.min(1, (e.clientX - rect.left) / rect.width));\n        if (this._type === 'integer')\n          this.value =\n              [this.value[0], Math.max(this.value[0], Math.round(this._min + delta * (this._max - this._min)))];\n      }\n    });\n\n    // Init input element.\n    this._display = element.querySelector('span#display') as HTMLElement;\n    this.updateDisplay();\n  }\n\n  /**\n   * Creates a new range from an element.\n   * @param element The element.\n   * @returns The range.\n   */\n  public static fromElement(element: Element): Range|null {\n    if (element instanceof HTMLDivElement && element.classList.contains('range'))\n      return new Range(element);\n    else\n      return null;\n  }\n\n  /**\n   * Creates a new range from a query selector to find the element.\n   * @param root The root element.\n   * @param selector The query selector.\n   * @returns The slider.\n   */\n  public static fromSelector(root: Element, selector: string): Range|null {\n    const element = root.querySelector(selector);\n    if (element)\n      return Range.fromElement(element);\n    else\n      return null;\n  }\n\n  /**\n   * Creates new sliders from the children of a root element.\n   * @param root The root element.\n   * @returns The sliders.\n   */\n  public static fromChildren(root: Element): [string, Range][] {\n    return Array.from(root.children)\n               .map(e => [e.id, Range.fromElement(e)])\n               .filter(([_, s]) => s !== null) as [string, Range][];\n  }\n\n  // Validate the value.\n  protected override validate(value: [number, number]): [number, number] {\n    // Fix to step.\n    value = [Math.round(value[0] / this._step) * this._step, Math.round(value[1] / this._step) * this._step];\n    if (this._type === 'integer') value = [Math.round(value[0]), Math.round(value[1])];\n    value = [Math.max(this._min, value[0]), Math.max(value[0], Math.min(this._max, value[1]))];\n    return value;\n  }\n\n  // Update the range display.\n  protected override updateDisplay(): void {\n    if (this._type === 'integer') this._display.innerText = this.value.join(' - ');\n    let delta = this.value.map(v => (v - this._min) / (this._max - this._min));\n    this._leftThumbWrapper.style.transform = `translateX(${delta[0] * 100}%)`;\n    this._rightThumbWrapper.style.transform = `translateX(${delta[1] * 100}%)`;\n  }\n}","import {Input} from './input';\n\ntype SliderType = 'exponential'|'linear'|'integer';\n\n/**\n * Implements an input slider.\n */\nexport class Slider extends Input<number> {\n  /** The track element. */\n  private _track: HTMLDivElement;\n\n  /** The thumb wrapper element. */\n  private _thumbWrapper: HTMLDivElement;\n\n  /** The thumb element. */\n  private _thumb: HTMLButtonElement;\n\n  /** The input element. */\n  private _input: HTMLInputElement;\n\n  /** The minimum value. */\n  private _min: number;\n\n  /** The maximum value. */\n  private _max: number;\n\n  /** The step value. */\n  private _step: number;\n\n  /** The digits shown. */\n  private _digits: number;\n\n  /** The slider's type. */\n  private _type: SliderType;\n\n  /** Is the mouse down? */\n  private _mouseDown: boolean;\n\n  /**\n   * @param element The DOM element that represents the slider.\n   */\n  public constructor(element: HTMLDivElement) {\n    // Get attributes.\n    let min = parseFloat(element.getAttribute('min') ?? '1');\n    if (min !== min) min = 1;\n    let max = parseFloat(element.getAttribute('max') ?? '100');\n    if (max !== max) max = 100;\n    [min, max] = [Math.min(min, max), Math.max(min, max)];\n    let step = parseFloat(element.getAttribute('step') ?? '1');\n    if (step !== step) step = 1;\n    let initial = parseFloat(element.getAttribute('initial') ?? '50');\n    if (initial !== initial) initial = 50;\n    let digits = parseInt(element.getAttribute('digits') ?? '2');\n    if (digits > 3) digits = 3;\n    const type = element.getAttribute('type') ?? 'linear';\n    if (type != 'exponential' && type != 'linear' && type != 'integer') throw new Error(`Invalid slider type: ${type}`);\n\n    if (type === 'exponential' && min <= 0)\n      throw new Error('Exponential sliders must have a minimum value greater than 0.');\n\n    // Initialize properties.\n    super(initial);\n    this._min = min;\n    this._max = max;\n    this._step = step;\n    this._digits = digits;\n    this._type = type;\n    this._mouseDown = false;\n\n    // Init track and thumb.\n    this._track = element.querySelector('div') as HTMLDivElement;\n    this._thumbWrapper = this._track.querySelector('div') as HTMLDivElement;\n    this._thumb = this._thumbWrapper.querySelector('button') as HTMLButtonElement;\n    this._thumb.addEventListener('mousedown', () => this._mouseDown = true);\n    document.addEventListener('mouseup', () => this._mouseDown = false);\n    document.addEventListener('mousemove', (e: MouseEvent) => {\n      if (this._mouseDown) {\n        const rect = this._track.getBoundingClientRect();\n        const delta = Math.max(0, Math.min(1, (e.clientX - rect.left) / rect.width));\n\n        if (this._type == 'exponential')\n          this.value = this._min * Math.pow(10, delta * Math.log10(this._max / this._min));\n        else if (this._type == 'linear')\n          this.value = this._min + delta * (this._max - this._min);\n        else if (this._type == 'integer')\n          this.value = Math.round(this._min + delta * (this._max - this._min));\n      }\n    });\n\n    // Init input element.\n    this._input = element.querySelector('input') as HTMLInputElement;\n    this._input.setAttribute('min', this._min.toString());\n    this._input.setAttribute('min', this._max.toString());\n    this._input.setAttribute('step', this._step.toString());\n    this._input.addEventListener('change', () => this.value = this._input.valueAsNumber);\n\n    this.updateDisplay();\n  }\n\n  /**\n   * Creates a new slider from an element.\n   * @param element The element.\n   * @returns The slider.\n   */\n  public static fromElement(element: Element): Slider|null {\n    if (element instanceof HTMLDivElement && element.classList.contains('slider'))\n      return new Slider(element);\n    else\n      return null;\n  }\n\n  /**\n   * Creates a new slider from a query selector to find the element.\n   * @param root The root element.\n   * @param selector The query selector.\n   * @returns The slider.\n   */\n  public static fromSelector(root: Element, selector: string): Slider|null {\n    const element = root.querySelector(selector);\n    if (element)\n      return Slider.fromElement(element);\n    else\n      return null;\n  }\n\n  /**\n   * Creates new sliders from the children of a root element.\n   * @param root The root element.\n   * @returns The sliders.\n   */\n  public static fromChildren(root: Element): [string, Slider][] {\n    return Array.from(root.children)\n               .map(e => [e.id, Slider.fromElement(e)])\n               .filter(([_, s]) => s !== null) as [string, Slider][];\n  }\n\n  // Validate the value.\n  protected override validate(value: number): number {\n    // Fix to step.\n    if (this._type === 'exponential')\n      value = Math.pow(10, Math.round(Math.log10(value) / this._step) * this._step);\n    else\n      value = Math.round(value / this._step) * this._step;\n    if (this._type === 'integer') value = Math.round(value);\n    return Math.max(this._min, Math.min(this._max, value));\n  }\n\n  // Update the slider display.\n  protected override updateDisplay(): void {\n    let delta;\n    if (this._type === 'exponential')\n      delta = Math.log10(this.value / this._min) / Math.log10(this._max / this._min);\n    else\n      delta = (this.value - this._min) / (this._max - this._min);\n\n    if (this._type === 'integer')\n      this._input.valueAsNumber = this.value;\n    else if (this.value > Math.pow(10.0, -1 - this._digits) && this.value < Math.pow(10.0, 6 - this._digits) || this.value == 0)\n      this._input.value = this.value.toFixed(this._digits);\n    else if (this._digits === 0)\n      this._input.value = this.value.toExponential(0);\n    else\n      this._input.value = this.value.toExponential(this._digits);\n    this._thumbWrapper.style.transform = `translateX(${delta * 100}%)`;\n  }\n}","import {Button} from './button';\nimport {Input} from './input';\n\n/**\n * Represents a UI button that toggles a boolean value.\n */\nexport class Toggle extends Input<boolean> {\n  /** The UI button that toggles the value. */\n  private _button: Button;\n\n  /**\n   * @param button The UI button that toggles the value.\n   * @param initial The initial value.\n   */\n  public constructor(button: Button, initial: boolean) {\n    super(initial);\n\n    this._button = button;\n    this._button.addOnClickCallback(() => this.value = !this.value);\n\n    this.updateDisplay();\n  }\n\n  /**\n   * Creates a new toggle from an element.\n   * @param element The element.\n   * @return The toggle.\n   */\n  public static fromElement(element: Element): Toggle|null {\n    if (!element.classList.contains('toggle')) return null;\n    const button = Button.fromElement(element);\n    if (button == null) return null;\n\n    // Get the properties from the attributes.\n    const initial = element.classList.contains('activated');\n    return new Toggle(button, initial);\n  }\n\n  /**\n   * Creates a new toggle from a query selector to find the element.\n   * @param root The root element.\n   * @param selector The query selector.\n   * @return The toggle.\n   */\n  public static fromSelector(root: Element, selector: string): Toggle|null {\n    const element = root.querySelector(selector);\n    if (element)\n      return Toggle.fromElement(element);\n    else\n      return null;\n  }\n\n  /**\n   * Creates new toggles from the children of a root element.\n   * @param root The root element.\n   * @returns The toggles.\n   */\n  public static fromChildren(root: Element): [string, Toggle][] {\n    return Array.from(root.children)\n               .map(e => [e.id, Toggle.fromElement(e)])\n               .filter(([_, t]) => t !== null) as [string, Toggle][];\n  }\n\n  // Validates the value.\n  protected override validate(value: boolean): boolean {\n    return value;\n  }\n\n  // Updates the button display.\n  protected override updateDisplay() {\n    this._button.element.classList.toggle('activated', this.value);\n  }\n}","import {Input} from './input';\nimport {Toggle} from './toggle';\n\n/**\n * Represents a set of UI toggles, of which only one can be activated at a time.\n */\nexport class Switch extends Input<string> {\n  /** The toggles. */\n  private _toggles: Map<string, Toggle>;\n\n  /** Does the switch allow no state? */\n  private _noneState: string|undefined;\n\n  /**\n   * @param toggles The switch toggles.\n   * @param initialState The initial state.\n   * @param noneState The state to use when no toggle is activated. If undefined, no state won't be allowed.\n   */\n  public constructor(toggles: Map<string, Toggle>, initialState: string, noneState: string|undefined = undefined) {\n    super(initialState);\n\n    if (toggles.size === 0) throw new Error('A switch cannot be empty, toggles must be specified.');\n    this._toggles = toggles;\n    this._noneState = noneState;\n\n    // Initialize toggles.\n    this._toggles.forEach((toggle, state) => {\n      // Set the initial state.\n      toggle.value = state === this.value;\n\n      // Add the callback.\n      toggle.addOnValueChangedCallback(value => {\n        if (value)\n          this.value = state;\n        else if (this.value === state && this._noneState !== undefined)\n          this.value = this._noneState;\n        else if (this.value === state)\n          toggle.value = true;  // Since no state isn't allowed, we need to activate the toggle.\n      });\n    });\n  }\n\n  /**\n   * Creates a new switch from an element.\n   * @param element The element.\n   * @return The switch.\n   */\n  public static fromElement(element: Element): Switch|null {\n    if (!(element instanceof HTMLDivElement) || !element.classList.contains('switch')) return null;\n    const toggles = Toggle.fromChildren(element);\n    const noneState = (element.getAttribute('none-state') ?? undefined);\n    const initialState = (element.getAttribute('initial') ?? noneState);\n    if (initialState === undefined) throw new Error('If no initial state is specified, none-state must be specified.');\n    return new Switch(new Map(toggles), initialState, noneState);\n  }\n\n  /**\n   * Creates a new switch from a query selector to find the element.\n   * @param root The root element.\n   * @param selector The query selector.\n   * @return The switch.\n   */\n  public static fromSelector(root: Element, selector: string): Switch|null {\n    const element = root.querySelector(selector);\n    if (element)\n      return Switch.fromElement(element);\n    else\n      return null;\n  }\n\n  /**\n   * Creates new switches from the children of a root element.\n   * @param root The root element.\n   * @returns The switches.\n   */\n  public static fromChildren(root: Element): [string, Switch][] {\n    return Array.from(root.children)\n               .filter(e => e instanceof HTMLDivElement && e.classList.contains('switch'))\n               .map(e => [e.id, Switch.fromElement(e as HTMLDivElement)])\n               .filter(([_, s]) => s !== null) as [string, Switch][];\n  }\n\n  // Validate the state.\n  protected override validate(state: string): string {\n    return state;\n  }\n\n  // Updates the display of the switch.\n  protected override updateDisplay() {\n    this._toggles.forEach((toggle, state) => toggle.value = state === this.value);\n  }\n}","import {Button} from './button';\nimport {Input} from './input';\nimport {Range} from './range';\nimport {Slider} from './slider';\nimport {Switch} from './switch';\nimport {Toggle} from './toggle';\n\n/**\n * Represents a form.\n */\nexport class Form {\n  /** The form element. */\n  private _element: HTMLDivElement;\n\n  /** The inputs on the form. */\n  private _inputs: Map<string, Input<any>>;\n\n  /** The cancel button. */\n  private _cancelButton: Button|null;\n\n  /** The submit button. */\n  private _submitButton: Button;\n\n  /** The on cancel callback. */\n  private _onCancelCallback: () => void;\n\n  /** The on submit callback. */\n  private _onSubmitCallback: () => void;\n\n  /**\n   * @param element The form element.\n   * @param inputs The inputs on the form.\n   */\n  public constructor(element: HTMLDivElement, inputs: Map<string, Input<any>>) {\n    this._element = element;\n    this._inputs = inputs;\n    this._cancelButton = Button.fromSelector(this._element, 'button#cancel');\n    const submit = Button.fromSelector(this._element, 'button#submit');\n    if (!submit) throw new Error('Submit button not found on form.');\n    this._submitButton = submit;\n    this._onCancelCallback = () => {};\n    this._onSubmitCallback = () => {};\n    if (this._cancelButton) this._cancelButton.addOnClickCallback(this.cancel.bind(this));\n    this._submitButton.addOnClickCallback(this.submit.bind(this));\n  }\n\n  /**\n   * Creates a new form from an element.\n   * @param element The element.\n   * @return The form.\n   */\n  public static fromElement(element: Element): Form|null {\n    if (!(element instanceof HTMLDivElement) || !element.classList.contains('form')) return null;\n\n    // Get all inputs on the form.\n    const inputs = new Map<string, Input<any>>();\n    Range.fromChildren(element).forEach(([id, r]) => inputs.set(id, r));\n    Slider.fromChildren(element).forEach(([id, s]) => inputs.set(id, s));\n    Switch.fromChildren(element).forEach(([id, s]) => inputs.set(id, s));\n    Toggle.fromChildren(element).forEach(([id, t]) => inputs.set(id, t));\n    return new Form(element, inputs);\n  }\n\n  /**\n   * Creates a new form from a query selector to find the element.\n   * @param selector The query selector.\n   * @return The form.\n   */\n  public static fromSelector(selector: string): Form|null {\n    const root = document.querySelector('body>div#forms');\n    if (!root) throw new Error('Couldn\\'t find forms root element.');\n    const element = root.querySelector(selector) as HTMLDivElement;\n    if (element)\n      return Form.fromElement(element);\n    else\n      return null;\n  }\n\n  /**\n   * Creates new forms from the children of a root element.\n   * @param root The root element.\n   * @returns The forms.\n   */\n  public static fromChildren(root: Element): [string, Form][] {\n    return Array.from(root.children)\n               .map(e => [e.id, Form.fromElement(e)])\n               .filter(t => t[1] !== null) as [string, Form][];\n  }\n\n  /**\n   * Sets the callback for when the form is canceled.\n   * @param callback The callback.\n   */\n  public setOnCancel(callback: () => void): void {\n    this._onCancelCallback = callback;\n  }\n\n  /**\n   * Sets the callback for when the form is submitted.\n   * @param callback The callback.\n   */\n  public setOnSubmit(callback: () => void): void {\n    this._onSubmitCallback = callback;\n  }\n\n  /**\n   * Checks if the form is visible.\n   */\n  public get visible(): boolean {\n    return !this._element.classList.contains('hidden');\n  }\n\n  /**\n   * Sets the visibility of the form.\n   */\n  public set visible(value: boolean) {\n    this._element.classList.toggle('hidden', !value);\n  }\n\n  /**\n   * Cancels the form.\n   */\n  public cancel(): void {\n    this.visible = false;\n    this._onCancelCallback();\n  }\n\n  /**\n   * Submits the form.\n   */\n  public submit(): void {\n    this.visible = false;\n    this._onSubmitCallback();\n  }\n\n  /**\n   * Gets an input from the form.\n   * @param name The name of the input.\n   * @return The input.\n   */\n  public get(name: string): Input<any>|null {\n    return this._inputs.get(name) ?? null;\n  }\n\n  /**\n   * Gets an iterator over the inputs on the form.\n   */\n  public get inputs(): IterableIterator<[string, Input<any>]> {\n    return this._inputs.entries();\n  }\n}\n","import {Form} from './form';\nimport {Input} from './input';\n\n/**\n * Represents a chain of forms.\n */\nexport class FormChain {\n  /** The forms in the chain. */\n  private _forms: Form[];\n\n  /** The index of the current form in the chain. */\n  private _currentIndex: number;\n\n  /** The on cancel callback. */\n  private _onCancelCallback: () => void;\n\n  /** The on submit callback. */\n  private _onSubmitCallback: () => void;\n\n  /**\n   * @param forms The forms in the chain.\n   */\n  public constructor(forms: Form[]) {\n    this._forms = forms;\n    this._currentIndex = -1;\n    this._onCancelCallback = () => {};\n    this._onSubmitCallback = () => {};\n\n    // Set callbacks for each form.\n    for (let i = 0; i < this._forms.length; i++) {\n      const form = this._forms[i];\n\n      form.setOnSubmit(() => {\n        if (i == this._forms.length - 1) {\n          this._currentIndex = -1;\n          this._onSubmitCallback();\n        } else\n          this._forms[i + 1].visible = true;\n      });\n\n      form.setOnCancel(() => {\n        if (i == 0) {\n          this._currentIndex = -1;\n          this._onCancelCallback();\n        } else\n          this._forms[i - 1].visible = true;\n      });\n    }\n  }\n\n  /**\n   * Creates a new form chain from an element.\n   * @param element The element.\n   * @return The form chain.\n   */\n  public static fromElement(element: Element): FormChain|null {\n    if (!(element instanceof HTMLDivElement) || !element.classList.contains('form-chain')) return null;\n\n    // Get all forms on the form chain.\n    const forms = Form.fromChildren(element).map(([_, f]) => f);\n    if (forms.length === 0) return null;\n    return new FormChain(forms);\n  }\n\n  /**\n   * Creates a new form chain from a query selector to find the element.\n   * @param selector The query selector.\n   * @return The form chain.\n   */\n  public static fromSelector(selector: string): FormChain|null {\n    const root = document.querySelector('body>div#forms');\n    if (!root) throw new Error('Couldn\\'t find forms root element.');\n    const element = root.querySelector(selector) as HTMLDivElement;\n    if (element)\n      return FormChain.fromElement(element);\n    else\n      return null;\n  }\n\n  /**\n   * Checks if the form chain is visible.\n   */\n  public get visible(): boolean {\n    return this._currentIndex !== -1;\n  }\n\n  /**\n   * Skips to the next form in the chain, by submitting the current form.\n   */\n  public skip() {\n    if (this._currentIndex !== -1) this._forms[this._currentIndex].submit();\n  }\n\n  /**\n   * Sets the visibility of the form chain.\n   */\n  public set visible(value: boolean) {\n    if (value && this._currentIndex === -1) {\n      this._currentIndex = 0;\n      this._forms[this._currentIndex].visible = true;\n    } else if (!value && this._currentIndex !== -1) {\n      this._forms[this._currentIndex].visible = false;\n      this._currentIndex = -1;\n    }\n  }\n\n  /**\n   * Gets an input from the form chain.\n   * @param name The name of the input.\n   * @return The input.\n   */\n  public get<T>(name: string): Input<T>|null {\n    for (const form of this._forms) {\n      const input = form.get(name);\n      if (input !== null) return input as Input<T>;\n    }\n    return null;\n  }\n\n  /**\n   * Gets an iterator over the inputs on the form chain.\n   */\n  public get inputs(): IterableIterator<[string, Input<any>]> {\n    return this._forms.flatMap(form => Array.from(form.inputs)).values();\n  }\n\n  /**\n   * Sets the on cancel callback.\n   * @param callback The callback.\n   */\n  public setOnCancel(callback: () => void) {\n    this._onCancelCallback = callback;\n  }\n\n  /**\n   * Sets the on submit callback.\n   * @param callback The callback.\n   */\n  public setOnSubmit(callback: () => void) {\n    this._onSubmitCallback = callback;\n  }\n}","/**\n * Loading screen implementation.\n */\nexport class LoadingScreen {\n  /** The loading screen element. */\n  private _element: HTMLElement;\n\n  /**\n   * @param element The loading screen element.\n   */\n  public constructor(element: HTMLElement) {\n    this._element = element;\n  }\n\n  /**\n   * Creates a new loading screen from a query selector.\n   * @param selector The selector for the loading screen element.\n   * @return The loading screen.\n   */\n  public static fromSelector(selector: string): LoadingScreen {\n    const element = document.querySelector(selector) as HTMLElement;\n    if (element === null) throw new Error('Loading screen element not found.');\n    return new LoadingScreen(element);\n  }\n\n  /**\n   * Checks if the the loading screen is visible.\n   */\n  public get loading(): boolean {\n    return this._element.style.display === 'block';\n  }\n\n  /**\n   * Shows or hides the loading screen.\n   */\n  public set loading(value: boolean) {\n    if (value)\n      this._element.style.display = 'block';\n    else\n      this._element.style.display = 'none';\n  }\n}","import * as GL from './gl';\nimport {Vec2} from './math';\nimport * as Sim from './sim';\nimport * as UI from './ui';\n\n/** The movement speed of the camera. */\nconst CAMERA_MOVEMENT_SPEED = 0.002;\n\n/** The zoom speed of the camera. */\nconst CAMERA_ZOOM_SPEED = 0.1;\n\n/** Maximum number of skipped frames. */\nconst MAX_SKIP = 5;\n\n/** Help page URL. */\nconst HELP_URL = 'https://riscadoa.com/portfolio/evolution-simulator/';\n\n/**\n * Manages all the application state.\n */\nexport class App {\n  /** Renderer used to draw. */\n  private _renderer: GL.Renderer;\n\n  /** Loading screen. */\n  private loadingScreen: UI.LoadingScreen;\n\n  /** Resize timer. */\n  private _resizeTimer: number;\n\n  /** Last update time. */\n  private _lastTime: number;\n\n  /** The simulation time. */\n  private _simulationTime: number;\n\n  /** Update time accumulator. */\n  private _updateTimeAccumulator: number;\n\n  /** Last mouse position. */\n  private _lastMouse: Vec2|null;\n\n  /** The currently selected creature. */\n  private _selectedCreature: Sim.Creature|null;\n\n  /** The simulation stage. */\n  private _stage: Sim.Stage|null;\n\n  /** The simulation speed. */\n  private _simulationSpeed: UI.Slider;\n\n  /** The best creature button. */\n  private _bestButton: UI.Button;\n\n  /** The fast forward button. */\n  private _fastForwardButton: UI.Button;\n\n  /** The help button. */\n  private _helpButton: UI.Button;\n\n  /** The current generation display. */\n  private _currentGeneration: UI.Display;\n\n  /** The fitness display. */\n  private _fitness: UI.Display;\n\n  /** The fast forward icon. */\n  private _fastForwardIcon: HTMLElement;\n\n  /** The pause icon. */\n  private _pauseIcon: HTMLElement;\n\n  /** Is fast forward enabled? */\n  private _fastForward: boolean;\n\n  // Default constructor.\n  public constructor() {\n    this._stage = null;\n\n    // Initialize the loading screen.\n    this.loadingScreen = UI.LoadingScreen.fromSelector('div#loading');\n\n    // Initialize the renderer.\n    const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    this._renderer = GL.createRenderer(canvas);\n\n    // Initialize the resize callback.\n    window.addEventListener('resize', () => {\n      this.loadingScreen.loading = true;\n      window.clearTimeout(this._resizeTimer);\n      this._resizeTimer = window.setTimeout(() => {\n        this._renderer.resize();\n        this.loadingScreen.loading = false;\n      }, 250);\n    });\n\n    // Initialize the mouse input callbacks.\n    this._lastMouse = null;\n    this._selectedCreature = null;\n    canvas.addEventListener('mousedown', (e) => {\n      if (e.button !== 0) return;\n      this._lastMouse = Vec2.new(e.offsetX, e.offsetY);\n      this._selectedCreature = this._stage?.pickCreature(this._renderer.camera.canvasToWorld(this._lastMouse)) ?? null;\n      if (this._selectedCreature !== null) this._lastMouse = null;\n    });\n    canvas.addEventListener('mousemove', (e) => {\n      if (this._lastMouse !== null) {\n        const mouse = Vec2.new(e.offsetX, e.offsetY);\n        const delta = mouse.sub(this._lastMouse);\n        this._lastMouse = mouse;\n\n        // Update the camera.\n        const movement = Vec2.new(-delta.x, delta.y).mul(CAMERA_MOVEMENT_SPEED / this._renderer.camera.zoom);\n        this._renderer.camera.position = this._renderer.camera.position.add(movement);\n      }\n    });\n    canvas.addEventListener('mouseup', e => {\n      if (e.button !== 0) return;\n      this._lastMouse = null;\n    });\n    canvas.addEventListener('wheel', (e) => {\n      const delta = e.deltaY;\n      const zoom = delta < 0 ? CAMERA_ZOOM_SPEED : -CAMERA_ZOOM_SPEED;\n      this._renderer.camera.zoom *= 1 + zoom;\n    });\n\n    // Initialize overlay.\n    this._bestButton = UI.Button.fromSelector(document.body, 'button#bestButton')!;\n    this._bestButton.addOnClickCallback(() => {\n      if (this._stage !== null) this._selectedCreature = this._stage.getBestCreature();\n    });\n    this._currentGeneration = UI.Display.fromSelector(document.body, 'div#currentGeneration')!;\n    this._currentGeneration.value = 1;\n    this._fitness = UI.Display.fromSelector(document.body, 'div#fitness')!;\n    this._fitness.visible = false;\n    this._fitness.value = 0;\n    this._simulationSpeed = UI.Slider.fromSelector(document.body, 'div#simulationSpeed')!;\n    this._fastForwardButton = UI.Button.fromSelector(document.body, 'button#fastForwardButton')!;\n    this._fastForwardButton.addOnClickCallback(() => {\n      if (this._stage !== null) {\n        window.setTimeout(() => {\n          while (this._fastForward)\n            ;\n          this._fastForward = true;\n          while (!this._stage!.update())\n            ;\n          this._currentGeneration.value += 1;\n          this._stage!.startRound();\n          this._selectedCreature = null;\n          this._fastForward = false;\n        }, 50);\n      }\n    });\n    this._fastForward = false;\n    this._fastForwardIcon = document.body.querySelector('i#fastForward')!;\n    this._fastForwardIcon.classList.toggle('hidden', true);\n    this._pauseIcon = document.body.querySelector('i#pause')!;\n    this._pauseIcon.classList.toggle('hidden', true);\n    this._helpButton = UI.Button.fromSelector(document.body, 'button#helpButton')!;\n    this._helpButton.addOnClickCallback(() => {\n      window.open(HELP_URL);\n    });\n\n    // Create introduction form.\n    const intro = UI.FormChain.fromSelector('#introduction')!;\n    intro.visible = true;\n    intro.setOnSubmit(() => {\n      // Get parameters from the form.\n      const params: Sim.StageSettings = {\n        population: intro.get<number>('population')!.value,\n        mutationRate: intro.get<number>('mutationRate')!.value,\n        eyeCount: intro.get<number>('eyeCount')!.value,\n        minExtraNeuronCount: intro.get<[number, number]>('extraNeuronCount')!.value[0],\n        maxExtraNeuronCount: intro.get<[number, number]>('extraNeuronCount')!.value[1],\n        minConnectionCount: intro.get<[number, number]>('connectionCount')!.value[0],\n        maxConnectionCount: intro.get<[number, number]>('connectionCount')!.value[1],\n        initialFoodCount: intro.get<number>('initialFoodCount')!.value,\n        newFoodRate: intro.get<number>('newFoodRate')!.value,\n        roundDuration: intro.get<number>('roundDuration')!.value,\n      };\n\n      // Create the stage.\n      this._stage = new Sim.Stage(params);\n\n      // Reset the view.\n      this._renderer.camera.position = Vec2.ZERO;\n      this._renderer.camera.zoom = 0.25;\n    });\n  }\n\n  /**\n   * Starts the application.\n   */\n  public start(): void {\n    // Initialize the time step timer.\n    this._lastTime = 0.0;\n    this._updateTimeAccumulator = 0.0;\n    this._simulationTime = 0.0;\n    this.loadingScreen.loading = false;\n    this._renderer.submit(new GL.CommandQueue(0.0));\n    requestAnimationFrame(this.onAnimationFrame.bind(this));\n  }\n\n  /**\n   * Animates the application.\n   * @param dt Delta time in seconds.\n   */\n  private animate(dt: number): void {\n    this._fastForwardIcon.classList.toggle('hidden', !this._fastForward);\n\n    // Update and draw the stage.\n    if (this._stage !== null && !this._fastForward) {\n      this._updateTimeAccumulator += dt * this._simulationSpeed.value;\n      this._simulationTime += dt * this._simulationSpeed.value;\n      if (this._updateTimeAccumulator >= Sim.TIME_STEP) {\n        // Generate the draw command queue.\n        let queue = new GL.CommandQueue(this._simulationTime);\n        this._stage.draw(queue);\n        if (this._selectedCreature) {\n          this._renderer.camera.position = this._selectedCreature.position;\n          this._renderer.camera.velocity = this._selectedCreature.velocity;\n          this._selectedCreature.nn.draw(\n              queue, this._selectedCreature.position.add(Vec2.new(0, -0.5)), this._selectedCreature.velocity, 0.5);\n        } else\n          this._renderer.camera.velocity = Vec2.ZERO;\n        this._renderer.submit(queue);\n\n        // Update the stage.\n        for (let i = 0; i < MAX_SKIP && this._updateTimeAccumulator >= Sim.TIME_STEP; i++) {\n          if (this._stage.update()) {\n            this._currentGeneration.value += 1;\n            this._stage.startRound();\n          }\n          this._updateTimeAccumulator -= Sim.TIME_STEP;\n        }\n        this._updateTimeAccumulator = 0.0;\n\n        // Update the UI.\n        this._fitness.visible = this._selectedCreature !== null;\n        if (this._selectedCreature) this._fitness.value = this._selectedCreature.fitness;\n      } else {\n        this._renderer.camera.position =\n            this._renderer.camera.position.add(this._renderer.camera.velocity.mul(dt * this._simulationSpeed.value));\n      }\n    }\n\n    // Flush the renderer.\n    this._renderer.flush(this._simulationTime);\n  }\n\n  /**\n   * Called when the round ends.\n   * @param time Time in milliseconds since the beginning of the application.\n   */\n  private onAnimationFrame(time: number): void {\n    // Calculate the delta time in seconds.\n    const dt = (time - this._lastTime);\n    this._lastTime = time;\n\n    // Animate the application.\n    if (!this.loadingScreen.loading) this.animate(dt * 0.001);\n    requestAnimationFrame(this.onAnimationFrame.bind(this));\n  }\n}","import {Renderer} from './renderer';\nimport {WebGLRenderer} from './webgl-renderer';\n\nexport {Camera} from './camera';\nexport {CommandQueue} from './command-queue';\nexport {Renderer};\n\n/**\n * Creates a new renderer.\n * @param canvas The canvas element.\n */\nexport function createRenderer(canvas: HTMLCanvasElement): Renderer {\n  const gl = canvas.getContext('webgl');\n  if (gl === null) throw new Error('WebGL is necessary but not supported.');\n  return new WebGLRenderer(canvas, gl);\n}","import {App} from './app/app';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const app = new App();\n  app.start();\n});\n"],"names":["$8b148bf6b83a7846$export$892596cec99bc70e","constructor","r","g","b","a","this","static","r1","g1","b1","a1","Math","random","clone","add","other","mix","other1","delta","clamp","min","black","max","white","$dcc7e654a00dbee5$export$ac4bca90992eed1","x","y","_x","_y","x1","y1","angle","cos","sin","sub","mul","scalar","div","scalar1","dot","other2","lengthSquared","length","sqrt","normalize","other3","undefined","atan2","acos","perpendicular","apply","mat","elements","min1","max1","abs","other4","other5","reflect","normal","other6","t","ZERO","$12ada8d188c54dae$export$83f4edd572c84121","Error","Float32Array","elements1","vec","c","s","v","Array","from","i","j","k","det","transpose","adjunt","inverse","$b65ffc6d52fcbf00$export$79f141de891a5fed","position","zoom","width","height","_position","velocity","_zoom","_width","_height","updateMatrix","value","value1","value2","value3","matrix","_matrix","worldToScreen","point","screenToWorld","point1","canvasToWorld","point2","normalized","new","translation","scale","$2e71e8a8838bb3b4$export$edf46b5a0ed25eb1","start","end","thickness","color","startVelocity","endVelocity","_startVelocity","_endVelocity","interpolate","dt","$e9206fb83975a82c$export$110703ce240af00c","center","size","_velocity","$3b4810748a69110d$export$e15e3a5ae5c2b5b","radius","$17d73e2faa924c3b$export$2906bdf8b6c2d498","$5d6bbdbde50a25a6$var$BACKGROUND_COLOR","$5d6bbdbde50a25a6$export$f6cc00ef28d7cf97","canvas","_commandQueue","_canvas","_camera","resize","submit","queue","flush","time","render","camera","window","innerWidth","innerHeight","executeCommands","method","command","gl","super","_gl","_drawShader","$5d6bbdbde50a25a6$var$ShaderProgram","_drawShaderPositionLocation","getAttributeLocation","_drawShaderTransformLocation","getUniformLocation","_drawShaderColorLocation","vertices","_circle","$5d6bbdbde50a25a6$var$CIRCLE_DIVISIONS","push","PI","_line","_box","_vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","viewport","clearColor","clear","COLOR_BUFFER_BIT","use","executeCommand","bind","final","uniformMatrix3fv","uniform3f","enableVertexAttribArray","vertexAttribPointer","FLOAT","drawArrays","TRIANGLE_FAN","offset","rotation","head","headScale","head1Rotation","head1Final","head2Rotation","head2Final","gl1","vertexShaderSource","fragmentShaderSource","_program","createProgram","attachShader","_vertexShader","_fragmentShader","useProgram","name","getAttribLocation","$1cd4c43d0422f0f2$export$bc4d090da4c38c92","_commands","_time","time1","map","Symbol","iterator","drawMovingBox","drawMovingCircle","center1","color1","velocity1","drawMovingLine","color2","drawMovingArrow","start1","end1","thickness1","color3","startVelocity1","endVelocity1","drawBox","center2","size1","color4","drawCircle","center3","radius1","color5","drawLine","start2","end2","thickness2","color6","drawArrow","start3","end3","thickness3","color7","$b8e733e75842c1f1$export$4b2c32e08f77ff18","position1","$b8e733e75842c1f1$export$f4847e7dd59b6a50","position2","$b8e733e75842c1f1$export$a5f98ca6607e0bb6","position3","$779b2e24f872f499$export$42a9d1bcccbbcaf9","minNeuronCount","maxNeuronCount","minConnectionCount","maxConnectionCount","_minNeuronCount","_maxNeuronCount","_minConnectionCount","_maxConnectionCount","$0ac10d11d717ad26$export$98b66c25bb38499d","weight","source","target","_weight","normalizeWeight","_source","_target","update","inputs","outputs","neuronCount","floor","u32","toU32","denormalizeWeight","weight1","WeightAmplitude","weight2","$ed4ac10ef71e1ed1$export$de46bdc322d1e566","genome","connections","_genome","_neuronCount","_connections","genome1","round","connectionCount","fill","mutate","rate","newNeuronCount","connection","filter","$6725f1e7a4cbba56$export$95be4ae94445245a","_neurons","_swapNeurons","_inputs","_outputs","set","index","get","index1","markInput","index2","markOutput","index3","reset","i1","sigmoid","draw","CIRCLE_RADIUS","NEURON_RADIUS","CONNECTION_THICKNESS","to","i2","borderColor","indexOf","exp","$7aaa11aac049f46b$export$9764fff2991ff94a","genotypes","mutationRate","_genotypes","_mutationRate","genotypeCount","mutationRate1","select","fitness","sortedFitness","f","sort","_1","_2","parents","breed","newGenotypes","_","$90bebdbd4654cb20$export$c63327b2184be238","penetration","$90bebdbd4654cb20$export$e2395b697f5a931f","colliding","distanceSquared","radiusSum","manifold","$77f232b4f70f469c$export$ad2048a957fbaf88","eyeCount","genotype","forward","_genotype","_nn","_forward","_color","_eyes","eyeCount1","extraNeuronCount","nearestFood","eye","distance","Infinity","dir","_rotationVelocity","nn","collider","eyeDir","eyeNextDir","$77f232b4f70f469c$var$CREATURE_RADIUS","eyeNext","eyeVelocity","Radius","$84f972c701bd837c$var$FOOD_COLOR","$84f972c701bd837c$export$160f9e0323fbc7fd","$d1b8645b77bc72e1$export$208cd1682bd0e4b6","settings","_settings","getNeuronCount","minExtraNeuronCount","maxExtraNeuronCount","_population","population","_creatures","_food","startRound","creature","randomPosition","initialFoodCount","_newFoodAccumulator","roundDuration","newFoodRate","forEach","getClosestFood","splice","$d1b8645b77bc72e1$export$dbe95407139f0f68","food","pickCreature","getBestCreature","best","fromAngle","closestFood","closestDistance","$978b179009f5dbc4$export$353f5b6fc5456de1","element","_element","_onClick","Set","addEventListener","callback","element1","HTMLButtonElement","root","selector","querySelector","fromElement","addOnClickCallback","removeOnClickCallback","callback1","delete","clearOnClickCallbacks","$3150536c8a433f50$export$76748c987176663a","_display","classList","contains","HTMLDivElement","innerText","toString","parseFloat","visible","toggle","$77a8d59fe1be1706$export$f5b8910cec6cf069","initial","_value","_onValueChanged","newValue","validate","updateDisplay","addOnValueChangedCallback","removeOnValueChangedCallback","$239d2ed853667207$export$9a58ef0d7ad3278c","getAttribute","step","type","_min","_max","_step","_type","_mouseDown","_track","_leftThumbWrapper","_leftThumb","_rightThumbWrapper","_rightThumb","document","e","rect","getBoundingClientRect","clientX","left","root1","children","id","join","style","transform","$cef218302c5f0c2e$export$472062a354075cee","digits","parseInt","_digits","_thumbWrapper","_thumb","pow","log10","_input","setAttribute","valueAsNumber","toFixed","toExponential","$716df50103fb11f0$export$bea8ebba691c5813","button","_button","$f48ef611b8f2db08$export$b5d5cf8927ab7262","toggles","initialState","noneState","_toggles","_noneState","state","fromChildren","Map","state1","$62cbb34c05d40bda$export$a7fed597f4b8afd8","_cancelButton","fromSelector","_submitButton","_onCancelCallback","_onSubmitCallback","cancel","setOnCancel","setOnSubmit","entries","$7433ffbdf455544f$export$f761dd08d9851a44","forms","_forms","_currentIndex","form","skip","input","flatMap","values","$4c1938dc61c8b6a5$export$e2b0760399e6dece","loading","display","$b4bfc8ad905cb117$export$86fbec116b87613f","_stage","loadingScreen","getElementById","_renderer","getContext","$7886ba4be4edc2a4$export$53ae2f996c64e9a","clearTimeout","_resizeTimer","setTimeout","_lastMouse","_selectedCreature","offsetX","offsetY","mouse","movement","deltaY","_bestButton","body","_currentGeneration","_fitness","_simulationSpeed","_fastForwardButton","_fastForward","_fastForwardIcon","_pauseIcon","_helpButton","open","intro","params","_lastTime","_updateTimeAccumulator","_simulationTime","requestAnimationFrame","onAnimationFrame","animate"],"version":3,"file":"index.6d892cf4.js.map"}